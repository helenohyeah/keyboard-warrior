{"version":3,"sources":["helpers/countArenasCompleted.js","components/Leaderboard.js","hooks/useLeaders.js","components/Canvas/StartGame.js","components/ArenaDoor.js","components/DoorSlider.js","components/ArenaDoorList.js","hooks/useArenaDoor.js","components/MapProgressBar.js","components/Canvas/Map.js","components/HealthBar.js","components/Avatar.js","components/PlayerAction.js","components/PlayerActionList.js","hooks/useInputMatcher.js","components/ChallengerActionList.js","components/TextInput.js","helpers/makeNewArenas.js","components/Canvas/Arena.js","hooks/useChallengerAction.js","components/Canvas/Outcome/WinGame.js","components/ScoreTable.js","components/Canvas/Outcome/WinBattle.js","components/Canvas/Outcome/LoseBattle.js","components/Canvas/Outcome/LoseGameNotBoss.js","components/Canvas/Outcome/LoseGameToBoss.js","components/Canvas/Outcome/index.js","components/Canvas/Credits.js","components/Canvas/Instructions.js","components/Canvas/MuteButton.js","components/Canvas/Transition.js","components/Canvas/index.js","hooks/useGameMode.js","hooks/useArena.js","hooks/useOutcome.js","hooks/useBattles.js","hooks/useGame.js","hooks/useMusic.js","components/Application.js","reportWebVitals.js","index.js"],"names":["countArenasLost","arenas","count","beaten","countArenasBeaten","Leaderboard","props","leaderStats","leaders","map","leader","player_name","score","className","useLeaders","page","useState","setLeaders","a","appendString","axios","get","data","getLeaders","leadersShow","setLeadersShow","StartGame","toggleLeaderBoard","onSubmit","event","preventDefault","game","setMode","htmlFor","onChange","setGame","target","value","type","id","placeholder","name","data-cy","required","disabled","Object","keys","length","onClick","ArenaDoor","currentDoor","setCurrentDoor","arena","doorClassName","alt","src","prev","title","setGameMode","setArena","arena_card","undefined","Difficulty","icon","points","DoorSlider","img","selected","index","ArenaDoorList","handleCurrentDoor","door","useArenaDoor","doorTagArray","toLowerCase","replace","sliderDots","ind","StepProgressBar","playerNotch","playerLevel","parseInt","this","arenasBeaten","percent","filledBackground","transition","accomplished","style","filter","React","Component","Map","useEffect","updateScore","HealthBar","animationDelay","animationDuration","height","skills","level","health","colors","Avatar","filename","PlayerAction","word","toUpperCase","content","PlayerActionList","handleLetterMatch","handleWordMatch","playerInput","playerActions","find","action","slice","indexOf","match","wordDOM","forEach","actions","ChallengerActionList","timerBarStyles","position","left","width","percentage","backgroundColor","transitionProperty","transitionDuration","duration","transitionTimingFunction","TextInput","autoFocus","e","updateToArenaCompleted","arenaCompleted","winLose","newArenasObj","newArenaTrue","push","newArenaFalse","Arena","setPlayerActions","wordIndex","player","initialPlayerHealth","challenger","challengerHealth","setHealth","setPlayerInput","attackTime","initial","setAttackTime","useChallengerAction","attack_time_ms","challengerTimer","setChallengerTimer","startBattle","endBattle","handleAttackAnimation","currentBattle","setCurrentBattle","rawWords","console","log","initialWordsState","words","getWords","animationTimer","getNextWord","changeHealth","clearTimeout","interval","setInterval","damage_per_hit","clearInterval","actionIndex","fighter","hp","newHealth","Math","min","max","setOutcome","setArenas","returnedBattle","handleBattleOver","attack","heal","challenger_name","challenger_sprite","WinGame","lastResult","resetGame","ScoreTable","result","baseScore","player_time","par_time","speedBonus","WinBattle","allArenas","resultProps","cleanArenas","LoseBattle","LoseGameNotBoss","LoseGameToBoss","Outcome","WINGAME","LOSEBATTLE","WINBATTLE","LOSEGAMENOTBOSS","LOSEGAMETOBOSS","WINALLARENAS","outcome","soundMedia","current","loop","time_seconds","round","Credits","href","rel","Instructions","MuteButton","music","setMusic","Transition","message","setMessage","patienceTimeout","setTimeout","Canvas","OUTCOME","mode","useGameMode","setCleanArenas","then","normalArenas","catch","err","useArena","useOutcome","setStyle","win","inputBattle","battle","end_time","Date","post","res","outputBattle","game_id","arena_id","start_time","attacker","animation","visibility","hide","useBattles","setScore","Number","NaN","startGame","newGame","newGameId","useGame","useMusic","useRef","paused","play","playMusic","aaa","volume","autoPlay","ref","Application","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","baseURL","interceptors","request","use","req","Promise","reject","response","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fe4347c.chunk.js","sourcesContent":["\n\nexport function countArenasLost(arenas) {\n  let count = 0;\n  for (const arena of arenas) {\n    if (arena.beaten === false) {\n      count +=1;\n    }\n  }\n  return count;\n};\n\nexport function countArenasBeaten(arenas) {\n  let count = 0;\n  for (const arena of arenas) {\n    if (arena.beaten === true) {\n      count +=1;\n    }\n  }\n  return count;\n};\n","import React from 'react';\n\nconst Leaderboard = (props) => {\n\n\n  const leaderStats = props.leaders.map(leader => {\n    return (\n      <tr>\n        <td>{leader.player_name}</td>\n        <td>{leader.score}</td>\n      </tr>\n    )\n  });\n\n  return (\n    <table className=\"leaderboard\">\n      <thead>\n        <tr>\n          <th>Player</th>\n          <th>Score</th>\n        </tr>\n      </thead>\n      <tbody>\n        {leaderStats}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Leaderboard;","import { useState } from \"react\";\nimport axios from 'axios';\n\nexport default function useLeaders(page) {\n\n  // Initialize state as empty array. Leaders will hold an array of up to 10 people's names and their scores.\n  const [leaders, setLeaders] = useState([{\n    player_name: 'Data loading',\n    score: 'N/A'\n  }]);\n\n  // For showing/hiding the leaderboard on start page\n  const [ leadersShow, setLeadersShow ] = useState(false);\n\n  async function getLeaders(page) {\n    const appendString = page  ? `?page=${page}`: '';\n    const leaders = await axios.get(`/api/leaders${appendString}`);\n    setLeaders(leaders.data);\n  };\n\n  return { leaders, getLeaders, leadersShow, setLeadersShow };\n};","// Libraries\nimport React from \"react\";\n\n// Components\nimport Leaderboard from '../Leaderboard';\n\n// Styles\nimport './StartGame.scss';\n\n// Hooks\nimport useLeaders from '../../hooks/useLeaders';\n\nfunction StartGame(props) {\n\n  // Disables Start Game button if empty player name\n  const isDisabled = () => Object.keys(props.game).length === 0 || props.game.player_name.length === 0;\n\n  // Destructure helpers\n  const { leaders, getLeaders, leadersShow, setLeadersShow } = useLeaders();\n\n  const toggleLeaderBoard = async () => {\n    if (leadersShow) {\n      setLeadersShow(false);\n    } else {\n      await getLeaders();\n      setLeadersShow(true);\n    }\n  };\n\n  return (\n    <main className=\"start-game\">\n      <h1>Keyboard Warrior</h1>\n      <menu>\n        <form onSubmit={(event) => {\n          event.preventDefault();\n          props.onSubmit(props.game.player_name, props.setMode);\n          }\n          }>\n          <label htmlFor=\"name\">Player Name<span>*</span></label><br/>\n          <input \n            onChange={(event) => props.setGame({player_name: event.target.value})}\n            value={props.game.player_name || ''}\n            type=\"text\" \n            id=\"name\" \n            placeholder=\"Enter player name\" \n            name=\"name\"\n            data-cy=\"enter-name\"\n            required\n          /><br />\n          <input\n            className=\"primary\"\n            type=\"submit\"\n            value=\"Start Game\"\n            disabled={isDisabled()}\n          />\n        </form>\n        <button className=\"primary\" onClick={() => props.setMode(\"CREDITS\")}>Credits</button>\n        <button className=\"primary\" onClick={() => props.setMode(\"INSTRUCTIONS\")}>Instructions</button>\n        <button className=\"primary\" onClick={toggleLeaderBoard}>{leadersShow ? 'Hide Leaderboard' : 'Show Leaderboard'}</button>\n        {leadersShow && <Leaderboard leaders={leaders} />}\n      </menu>\n    </main>\n  );\n}\n\nexport default StartGame;","// Libraries\nimport React from \"react\";\n\nfunction ArenaDoor(props) {\n\n  const { arenas, currentDoor, setCurrentDoor } = props;\n\n  const arena = arenas[currentDoor];\n\n  const pointsIcon = '/images/green-diamond.png';\n  const disabled = (typeof arena.beaten === 'boolean'); // Either \"true\" or \"false\" showing that the player has already either won or lost\n  // in this arena, will cause the arena door to be disabled so player cannot enter it again\n  const doorClassName = disabled ? \"card card-disabled\" : \"card\";\n\n  const setPreviousDoor = () => {\n    setCurrentDoor(prev => (prev !== 0) ? prev - 1 : prev);\n  };\n\n  const setNextDoor = () => {\n    setCurrentDoor(prev => (prev !== arenas.length - 1) ? prev + 1 : prev);\n  };\n\n  return (\n    <div className=\"door\">\n      <img className=\"door-arrow left\" alt=\"Go left\" src=\"/images/left_arrow_circle.png\" onClick={setPreviousDoor} />\n      <div\n        className={doorClassName}\n        data-cy=\"enter-arena\"\n        title={disabled ? `No rematches! Please choose another arena` : `Enter arena`}\n        onClick={() => {\n          if (!disabled) {\n            props.setGameMode(\"ARENA\");\n            props.setArena(arena);\n          }\n        }}>\n        <h3>{arena.name}</h3>\n        <img\n          className=\"door-image\"\n          alt={\"Enter \" + arena.name}\n          src={arena.arena_card}\n        />\n        <footer>\n          {arena.beaten === undefined &&\n            <>\n              <div className=\"difficulty\">\n                <img\n                  src={arena.Difficulty.icon}\n                  alt={arena.Difficulty.name}\n                />\n                {arena.Difficulty.name}\n              </div>\n              <div className=\"points\">\n                <img\n                  src={pointsIcon}\n                  alt={arena.points + \" points\"}\n                />\n                {arena.points + \" PTS\"}\n              </div>\n            </>}\n          {(arena.beaten === true) && <aside>Congrats, you beat this level!</aside>}\n          {(arena.beaten === false) && <aside>You were defeated!</aside>}\n        </footer>\n      </div>\n      <img className=\"door-arrow right\"  alt=\"Go right\" src=\"/images/right_arrow_circle.png\" onClick={setNextDoor} />\n    </div>\n  );\n}\n\nexport default ArenaDoor;","import React from \"react\";\n\nfunction DoorSlider(props) {\n\n  const img = (props.selected) ? \"/images/yellow-dot.png\" : \"/images/grey-dot.png\";\n  const className = (props.selected) ? \"selected\" : \"\";\n\n  return (\n    <img\n      className={'door-slider ' + className}\n      data-cy=\"door-slider\"\n      alt=\"door\"\n      src={img}\n      onClick={() => props.setCurrentDoor(props.index)}\n    />\n  )\n}\n\nexport default DoorSlider;","// Libraries\nimport React from \"react\";\n\n// Components\nimport ArenaDoor from './ArenaDoor';\nimport DoorSlider from \"./DoorSlider\";\n\n// Hooks\nimport useArenaDoor from \"../hooks/useArenaDoor\";\n\nfunction ArenaDoorList(props) {\n\n  const { currentDoor, setCurrentDoor, handleCurrentDoor } = useArenaDoor();\n\n  // Creating an array of doors in dash-case, which can be used as arguments for the setCurrentDoor() function to display different arena doors\n  const doorTagArray = props.arenas.map(arena => arena.name.toLowerCase().replace(/\\s/g, '-'));\n\n  const sliderDots = props.arenas.map((arena, ind) => {\n    // const img = (handleCurrentDoor(doorTag)) ? \"/images/yellow-dot.png\" : \"/images/grey-dot.png\";\n    return (<DoorSlider\n      key={arena.name + '-slider'}\n      index={ind}\n      selected={handleCurrentDoor(ind)}\n      setCurrentDoor={setCurrentDoor}\n    />);\n  });\n\n  return (\n    <>\n      <h2>Choose your arena!</h2>\n      <div className=\"door-slider-dots\">\n        {sliderDots}\n      </div>\n      <div className=\"doors-container\">\n        <ArenaDoor\n          setGameMode={props.setGameMode}\n          currentDoor={currentDoor}\n          setCurrentDoor={setCurrentDoor}\n          arenas={props.arenas}\n          setArena={props.setArena}\n          doorTagArray={doorTagArray}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default ArenaDoorList;","import { useState } from \"react\";\n\nexport default function useArenaDoor() {\n\n  const [currentDoor, setCurrentDoor] = useState(0);\n  \n  // Returns true if door is selected\n  function handleCurrentDoor(door) {\n    if (door === currentDoor) return true;\n    return false;\n  }\n\n  return { currentDoor, setCurrentDoor, handleCurrentDoor }\n}","import React from \"react\";\nimport \"react-step-progress-bar/styles.css\";\nimport { ProgressBar, Step } from \"react-step-progress-bar\";\n\nexport class StepProgressBar extends React.Component { \n  render() {\n    const regularNotch0 = \"/images/zero.png\"\n    const regularNotch1 = \"/images/one.png\"\n    const regularNotch2 = \"/images/two.png\"\n    const regularNotch3 = \"/images/three.png\"\n    const regularNotch4 = \"/images/four.png\"\n    const regularNotch5 = \"/images/five.png\"\n    const playerNotch = \"/images/player-notch.gif\"\n    const bossNotch = \"/images/boss_icon.png\"\n    const playerLevel = parseInt(this.props.arenasBeaten)\n    const numLevelsInclStart = 6\n    return (\n      \n      <span title={`You have won ${this.props.arenasBeaten} ${this.props.arenasBeaten === 1 ? 'battle' : 'battles'}. \n      Win ${5 - this.props.arenasBeaten} more and beat the final boss to win the game!`}>\n      <ProgressBar\n        percent={parseInt(this.props.arenasBeaten) * (100 / numLevelsInclStart)}\n        filledBackground=\"linear-gradient(to right, #fefb72, #f0bb31)\"\n      >\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              src={playerLevel === 0 ? playerNotch : regularNotch0}\n              alt=\"Start\"\n            />\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              src={playerLevel === 1 ? playerNotch : regularNotch1}\n              alt=\"Level 1\"\n            />\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              src={playerLevel === 2 ? playerNotch : regularNotch2}\n              alt=\"Level 2\"\n            />\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              src={playerLevel === 3 ? playerNotch : regularNotch3}\n              alt=\"Level 3\"\n            />\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              src={playerLevel === 4 ? playerNotch : regularNotch4}\n              alt=\"Level 4\"\n            />\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <>\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              src={playerLevel === 5 ? playerNotch : regularNotch5}\n              alt=\"Level 5\"\n            />\n            </>\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              src={playerLevel === 6 ? playerNotch : bossNotch}\n              alt=\"Level 6\"\n            />\n          )}\n        </Step>\n      </ProgressBar>\n      </span>\n    );\n  }\n}","// Libraries\nimport React, { useEffect } from \"react\";\n\n// Components\n// import ProgressBar from '../ProgressBar';\nimport ArenaDoorList from '../ArenaDoorList';\nimport { StepProgressBar } from \"../MapProgressBar\";\n\n// Styles\nimport './Map.scss';\n\n// Hooks\n\nfunction Map(props) {\n\n  useEffect(() => {\n    props.updateScore();\n  }, [props.game]);\n\n  return (\n    <main className=\"map\">\n      <StepProgressBar\n        arenasBeaten={props.arenasBeaten}\n      />\n      <ArenaDoorList\n        arenas={props.arenas}\n        setGameMode={props.setGameMode}\n        arena={props.arena}\n        setArena={props.setArena}\n      />\n      <p className=\"score\">POINTS: <strong>{props.score}</strong></p>\n    </main>\n  );\n}\n\nexport default Map;","// Libraries\nimport React from \"react\";\nimport SkillBar from 'react-skillbars';\n\nfunction HealthBar(props) {\n  const colors = {\n    \"bar\": \"#00E436\",\n    \"title\": {\n      \"text\": \"#000\",\n      \"background\": \"#fff\"\n    }\n  };\n\n  return (\n    <>\n      <img src=\"/images/red-cross.png\" alt=\"Health\" onClick={() => props.onClick(10)} />\n      <SkillBar animationDelay={0} animationDuration={200} height={'1.5rem'} skills={[{type: 'Health', level: props.health}]} colors={colors}/>\n    </>\n  );\n}\n\nexport default HealthBar;","// Libraries\nimport React from \"react\";\n\nfunction Avatar(props) {\n  return (\n    <>\n      <h2>{props.name}</h2>\n      <img src={props.filename} alt={props.name + \"'s avatar\"} />\n    </>\n  );\n}\n\nexport default Avatar;","// Libraries\nimport React from 'react';\nimport { Markup } from 'interweave';\n\nfunction PlayerAction(props) {\n  return (\n    <li>\n      <img src={props.icon} alt={props.name} title={`Type \"${props.word.toUpperCase()}\" to ${props.name}`} />\n      <div className=\"action-word\" data-cy={props.name + \"-word\"} title={`Type \"${props.word.toUpperCase()}\" to ${props.name}`}>\n        <Markup className=\"action-word\" content={props.word} />\n      </div>\n    </li>\n  );\n}\n\nexport default PlayerAction;","// Libraries\nimport React from \"react\";\n\n// Components\nimport PlayerAction from './PlayerAction';\n\n// Hooks\nimport useInputMatcher from '../hooks/useInputMatcher';\n\nfunction PlayerActionList(props) {\n\n  const { handleLetterMatch } = useInputMatcher();\n  const { playerInput, playerActions } = props;\n\n  const match = handleLetterMatch(playerInput, playerActions);\n  \n  // Create a wordDOM with style applied to matched letters\n  if (match >= 0) {\n    // const matchedActionIndex = playerActions.findIndex(action => action.word.slice(0, playerInput.length) === playerInput.toLowerCase());\n    const action = playerActions[match];\n    action.wordDOM = `<pre class=\"match\">${action.word.slice(0, playerInput.length)}</pre><pre>${action.word.slice(playerInput.length)}</pre>`;\n  // Reset style if letters do not match\n  } else {\n    playerActions.forEach(action => action.wordDOM = action.word);\n  }\n\n  const actions = playerActions.map(action => {\n    return (\n      <PlayerAction\n        key={action.name}\n        name={action.name}\n        icon={action.icon}\n        word={action.wordDOM || action.word}\n      />\n    )\n  });\n\n  return (\n    <ul>\n      {actions}\n    </ul>\n  )\n}\n\nexport default PlayerActionList;","export default function useInputMatcher() {\n\n  // playerInput: \"word\"\n  // playerActions: [{ name: \"attack\", word: \"word\"}, { name: \"heal\", word: \"girl\" }]\n\n  // Check for letter matches and returns true if a match is found. \n  // Note: This function has been changed (Sherwin note 2020-11-25)\n  // Now it returns the index of the matched action (0 = attack, 1 = heal) or else returns -1 if no match is found\n  const handleLetterMatch = (playerInput, playerActions) => {\n    if (playerInput.length > 0) {\n      const actionWordSlices = playerActions.map(action => action.word.slice(0, playerInput.length));\n      return actionWordSlices.indexOf(playerInput.toLowerCase());\n    }\n    return -1;\n  }\n\n  // Check for word matches and returns the action name if a match is found\n  const handleWordMatch = (playerInput, playerActions) => {\n    return playerActions.find(action => action.word === playerInput.toLowerCase());\n  }\n\n  return {\n    handleWordMatch,\n    handleLetterMatch\n  }\n}\n","// Libraries\nimport React from \"react\";\n\n\nfunction ChallengerActionList(props) {\n  // Sets the time until the next challenger attack in tenths of a second\n  // Hard-coded to 2 seconds between attacks right now\n\n  const timerBarStyles = {\n    position: 'absolute',\n    height: 'inherit',\n    left: '0px',\n    width: props.percentage + '%', /* CSS transitions will be applied using states to change the width of the bar */\n    backgroundColor: 'red',\n    transitionProperty: 'width',\n    transitionDuration: props.duration + 'ms',\n    transitionTimingFunction: 'linear'\n  };\n\n  return (\n    <div className=\"challenger-actions\">\n      {/* This value would be passed from the state?? Or through a setInterval of some kind to update 50 times a second? */}\n      <p>NEXT ATTACK</p>\n      <div className=\"bar-container\"> {/* Creates the timer bar */}\n        <div className=\"timer-bar\" style={timerBarStyles}> {/* Creates the animating portion of timer bar, uses CSS transitions */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChallengerActionList;","// TextInput\nimport React from \"react\";\n\nfunction TextInput(props) {\n\n  return (\n    <>\n      <input\n        autoFocus\n        type=\"text\"\n        name=\"input\"\n        placeholder=\"Type words above to attack or heal!\"\n        value={props.value} \n        onChange={e => props.onChange(e.target.value)}\n      />\n    </>\n  );\n}\n\nexport default TextInput;","\n\n//takes in an array of arenas and the arena that was completed, plus a boolean of whether arena was won or lost and returns a \n//new array of arenas where the won arena's beaten value is true or false\n\nexport default function updateToArenaCompleted(arenas, arenaCompleted, winLose) {\n  let newArenasObj = []\n  for (const arena of arenas) {\n    if (arena.name === arenaCompleted && winLose) {\n      const newArenaTrue = {\n        ...arena,\n        beaten: true\n      }\n      newArenasObj.push(newArenaTrue)\n    } else if (arena.name === arenaCompleted && !winLose) {\n      const newArenaFalse = {\n        ...arena,\n        beaten: false\n      }\n      newArenasObj.push(newArenaFalse)\n    } else {\n      newArenasObj.push(arena)\n    }\n  }\n  return newArenasObj;\n}\n","// Libraries\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\n// Components\nimport HealthBar from '../HealthBar';\nimport Avatar from '../Avatar';\nimport PlayerActionList from '../PlayerActionList';\nimport ChallengerActionList from '../ChallengerActionList';\nimport TextInput from '../TextInput';\n\n// Styles\nimport './Arena.scss'\n//helpers\nimport updateToArenaCompleted from \"../../helpers/makeNewArenas\";\nimport { countArenasLost, countArenasBeaten } from \"../../helpers/countArenasCompleted\";\n\n// Hooks\nimport useInputMatcher from '../../hooks/useInputMatcher';\nimport useChallengerAction from '../../hooks/useChallengerAction';\n\nfunction Arena(props) {\n\n  // States\n  const [playerActions, setPlayerActions] = useState([]);\n  const [wordIndex, setWordIndex] = useState([0, 0]); // [Current attack word index, Current heal word index]\n  const [health, setHealth] = useState({ player: props.initialPlayerHealth, challenger: props.challengerHealth })\n  const [playerInput, setPlayerInput] = useState('');\n  const { attackTime } = useChallengerAction(props.arena.Difficulty.attack_time_ms);\n  const { handleWordMatch } = useInputMatcher();\n  // Timings for the challenger's attacks\n  const [challengerTimer, setChallengerTimer] = useState(20);\n  const { startBattle, endBattle, style, handleAttackAnimation, currentBattle, setCurrentBattle } = props;\n\n\n  // On first load\n  useEffect(() => {\n    async function getWords() {\n      // Start battle timer\n      setCurrentBattle(startBattle(props.game.id, props.arena.id));\n      // Get word list and action list\n      try {\n        const rawWords = await axios.get(`/api/action-words/${props.arena.id}`);\n        console.log('Current battle is: ', currentBattle);\n        const initialWordsState = rawWords.data.map((action, ind) => {\n          return { ...action, word: action.words[0] };\n        });\n        setPlayerActions(initialWordsState);\n      } catch (err) {\n        console.log(\"Error getting data: \", err);\n      };\n    }\n    getWords();\n  }, [props.arena.id]);\n\n\n  // Handles player attack\n  useEffect(() => {\n\n    const action = handleWordMatch(playerInput, playerActions);\n    // When finished typing a word, action will equal the name of the action it executes\n    let animationTimer;\n    if (action) {\n      // Show action animation\n      animationTimer = handleAttackAnimation('player', action.name);\n      // Grab a new word\n      getNextWord(action);\n      // Deal damage\n      switch (action.name) {\n        case 'attack':\n          changeHealth('challenger', -10);\n          break;\n        case 'heal':\n          changeHealth('player', 20);\n          break;\n        default:\n      };\n      // Clear the text box\n      setPlayerInput('');\n    }\n    return () => clearTimeout(animationTimer);\n  }, [playerInput]);\n\n\n  // Handles Challenger Attack\n  // Use a useEffect to prevent looping (otherwise, every time interval is set, the re-render causes a second timer to be started, etc.)\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (challengerTimer === 0) {\n        // Show attack animation\n        handleAttackAnimation('challenger');\n        setChallengerTimer(19);\n        changeHealth('player', -props.arena.Difficulty.damage_per_hit);\n        // We would eventually put a function for the challenger to attack here\n      } else {\n        setChallengerTimer(prev => prev - 1);\n      }\n    }, attackTime / 20);\n    return () => clearInterval(interval);\n  }, [challengerTimer, attackTime]);\n\n  // Gets the next word from the randomized list of words\n  const getNextWord = (action) => {\n    const actionIndex = playerActions.indexOf(action);\n    // Get next word or restart from beginning of word list\n    (wordIndex[actionIndex] === action.words.length - 1) ? wordIndex[actionIndex] = 0 : wordIndex[actionIndex]++;\n    playerActions[actionIndex].word = playerActions[actionIndex][\"words\"][wordIndex[actionIndex]];\n  }\n\n  // Change health after an attack\n\n  const changeHealth = (fighter, hp) => {\n    setHealth(prev => {\n      const newHealth = { ...prev };\n      newHealth[fighter] = Math.min(Math.max(newHealth[fighter] + hp, 0), 100);\n      return newHealth;\n    });\n  };\n\n  /*\n  1. health.player === 0 && !MORETHAN 3 ARENAS LOST => LOSE THE BATTLE => DEFEAT SCREEN THAT LINKS BACK TO MAP\n  2. health.player === 0 && MORE THAN 3 ARENAS LOST => LOSE THE GAME, BUT NOT TO THE BOSS => DEFEAT SCREEN WITH RIDICULE THAT LINKS BACK TO THE START SCREEN (AND CLEAR THE GAME STATE)\n  3. health.player === 0 && CHALLENGER/ARENA === BOSS => LOST THE GAME, AGAINST THE BOSS => DEFEAT SCREEN WITH CONDOLENCES THAT LINKS BACK TO THE START SCREEN (AND CLEAR ALL STATE)\n  4. health.challenger === 0 && !CHALLENGER/ARENA === BOSS => WIN THE BATTLE, BUT NOT THE FINAL BATTLE => VICTORY SCREEN THAT LINKS BACK TO THE MAP\n  5. health.challenger === 0 && !CHALLENGER/ARENA === BOSS && ARENAS BEATEN === 5 => WIN THE FINAL BATTLE BEFORE THE BOSS => VICTORY SCREEN THAT LINKS BACK TO ARENA WITH BOSS (SET CHALLENGER TO BOSS)\n  6. health.challenger === 0 && CHALLENGER/ARENA === BOSS => WIN THE GAME, INCLUDING BOSS => VICTORY SCREEN WITH YOUR NAME ON THE LEADERBOARD & FIREWORKS, LINKS BACK TO THE START SCREEN (AND CLEAR ALL STATE)\n  \n  SCREENS:\n  1. LoseBattle.js - EXISTS\n  2. LoseGameNotBoss.js - CREATE\n  3. LoseGameToBoss.js - CREATE\n  4. WinBattle.js  - EXISTS\n  5. WinAllArenas.js - CREATE\n  6. WinGame.js  - EXISTS\n  \n  */\n\n  // End of battle\n\n  async function handleBattleOver() {\n    if (health.player === 0) {\n      if (props.arena.name === \"Boss\") {\n        props.setOutcome('LOSEGAMETOBOSS');\n      } else {\n        if (countArenasLost(props.arenas) >= 2) {\n          props.setOutcome('LOSEGAMENOTBOSS');\n        } else {\n          props.setOutcome('LOSEBATTLE');\n          props.setArenas(updateToArenaCompleted(props.arenas, props.arena.name, false))\n        }\n      }\n      props.setMode(\"TRANSITION\");\n      console.log('current battle is: ', currentBattle);\n      const returnedBattle = await endBattle(false, currentBattle);\n      setCurrentBattle(returnedBattle);\n      props.setMode(\"OUTCOME\");\n    } else if (health.challenger === 0) {\n      if (props.arena.name === \"Boss\") {\n        props.setOutcome('WINGAME');\n      } else {\n        if (countArenasBeaten(props.arenas) >= 4) {\n          props.setOutcome('WINALLARENAS');\n          props.setMode(\"OUTCOME\");\n        } else {\n          props.setOutcome('WINBATTLE');\n          props.setArenas(updateToArenaCompleted(props.arenas, props.arena.name, true))\n        }\n      }\n      props.setMode(\"TRANSITION\");\n      console.log('current battle is: ', currentBattle);\n      const returnedBattle = await endBattle(true, currentBattle);\n      setCurrentBattle(returnedBattle);\n      props.setMode(\"OUTCOME\");\n    }\n  };\n\n  useEffect(() => {\n    handleBattleOver();\n  }, [health])\n\n\n  return (\n    <main className=\"arena\" >\n      <div className=\"window\">\n        <div className=\"window-bar\">\n          <span className=\"dot close\"></span>\n          <span className=\"dot minimize\"></span>\n          <span className=\"dot maximize\"></span>\n          <span className=\"window-title\">{props.arena.name}</span>\n        </div>\n        <div className=\"window-content\">\n          <div className=\"health-bar\" data-cy=\"health-bar\">\n            <HealthBar\n              health={health.player}\n              onClick={() => { changeHealth('player', -10) }}\n            />\n          </div>\n          <div className=\"health-bar\" data-cy=\"health-bar\">\n            <HealthBar\n              health={health.challenger}\n              onClick={() => { changeHealth('challenger', -10) }}\n            />\n          </div>\n          <div className=\"avatar player\">\n            <Avatar\n              name={props.game.player_name || 'Player'}\n              filename='/images/boss-spirit-fighter.png'\n            />\n            <img\n              className=\"action player\"\n              src=\"/images/player-attack.png\"\n              alt=\"Player attacks\"\n              style={style.player.attack}\n            />\n            <img\n              className=\"action player\"\n              src=\"/images/player-heal.png\"\n              alt=\"Player heals\"\n              style={style.player.heal}\n            />\n          </div>\n          <div className=\"avatar challenger\">\n            <Avatar\n              name={props.arena.challenger_name}\n              filename={props.arena.challenger_sprite}\n            />\n            <img\n              className=\"action challenger\"\n              src=\"/images/challenger-attack.png\"\n              alt=\"Challenger attacks\"\n              style={style.challenger}\n            />\n          </div>\n          <div className=\"player-actions\" data-cy=\"player-actions\">\n            <PlayerActionList\n              playerActions={playerActions}\n              playerInput={playerInput}\n            />\n          </div>\n          <div className=\"challenger-actions\">\n            {/* <div className=\"buttons\">\n              <button onClick={() => setAttackTime(1000000000)}>Pause</button>\n              <button onClick={() => setAttackTime(20000)}>Slow</button>\n              <button onClick={() => setAttackTime(2000)}>Normal</button>\n            </div> */}\n            <ChallengerActionList\n              // actions={{\n              //   timeToAttack: 5\n              // }}\n              attack='/images/sword.png'\n              duration={attackTime / 20}\n              percentage={challengerTimer / 20 * 100}\n            />\n          </div>\n          <div className=\"typing\" data-cy=\"type-here\">\n            <TextInput\n              value={playerInput}\n              onChange={setPlayerInput}\n            />\n          </div>\n        </div>\n\n      </div>\n    </main >\n  );\n}\n\nexport default Arena;","// controls the challenger's state\n// makes an axios request to challengers to get the name, health, attack time etc\n\n// shifts between each of the game modes: start, map, arena and result\n\nimport { useState } from \"react\";\n\nexport default function useChallengerAction(initial) {\n\n  const [attackTime, setAttackTime] = useState(initial);\n\n  return { attackTime, setAttackTime};\n}\n","import React from 'react';\nimport Leaderboard from '../../Leaderboard';\n\n// Only a template, it is currently not possible to reach this page since boss hasn't been created yet\nconst WinGame = (props) => {\n\n  return (\n    <main className=\"outcome win-game\">\n      <div className=\"message\">\n        <h1>YOU WON! CONGRATS!</h1>\n        <p>With your victory over the boss, you earned {props.lastResult} points.</p>\n        <p>Your final score is {props.score} points. If it's high enough, you'll see it in the leaderboard below!</p>\n        <button className=\"primary\" onClick={() => {\n          props.resetGame()\n        }}>Back to Start</button>\n        <Leaderboard leaders={props.leaders} />\n      </div>\n    </main>\n  );\n};\n\nexport default WinGame;","import React from 'react';\n\nconst ScoreTable = (props) => {\n  return (\n    <table>\n      <thead></thead>\n      <tbody>\n        <tr>\n          <td>Base Score: </td>\n          <td>{props.result.baseScore}</td>\n        </tr>\n        <tr title={`You took ${props.result.player_time} seconds to complete a level where the benchmark time was ${props.result.par_time} s`}>\n          <td>Speed Bonus: </td>\n          <td>{props.result.speedBonus}x</td>\n        </tr>\n        <tr>\n          <td>This round you earned:</td>\n          <td>{props.result.lastResult} points!</td>\n        </tr>\n      </tbody>\n    </table>);\n};\n\nexport default ScoreTable;","import React from 'react';\nimport ScoreTable from '../../ScoreTable';\n\nconst WinBattle = (props) => {\n  \n  // Ensuring that user goes to boss arena after they have won 5 battles\n  const goToBossArena = () => {\n    props.setArena(props.cleanArenas.find(arena => arena.name === 'Boss'));\n    props.setMode('ARENA');\n  };\n\n  return (\n    <main className=\"outcome win-battle\">\n      <div className=\"message\">\n        <h1>VICTORY</h1>\n        <p>Congrats, you have triumphed over {props.arena.challenger_name} in {props.arena.name}!</p>\n        {props.allArenas && <p>You beat 5 levels! That means you now enter the arena with the boss. Win this fight and you win the game. Good luck!</p>}\n        <ScoreTable result={props.resultProps} />\n        <p>{props.allArenas ? 'Heading into the final fight, you have' : 'You now have'} a total of {props.score} points.</p>\n        {/* Note: Since arena has been set to boss arena already in the Outcome/index.js page, this will send player to boss arena or to map */}\n        <button className=\"primary\" onClick={props.allArenas ? goToBossArena : () => props.setMode('MAP')}>\n          {props.allArenas ? 'Continue To Boss!' : 'Choose Next Battle!'}\n        </button>\n      </div>\n    </main>\n  );\n};\nexport default WinBattle;\n\n// props.arena.Difficulty.par_time / props.currentBattle.time_seconds","import React from 'react';\n\nconst LoseBattle = (props) => {\n\n\n  return (\n    <main className=\"outcome lose-battle\">\n      <p className=\"message\">\n        <h1>DEFEAT</h1>\n        <p>There's no sugercoating this - losing sucks. But the great thing is this, you still have some more chances!</p>\n        <p>You remain at {props.score} points.</p>\n        <button className=\"primary\" onClick={() => props.setMode('MAP')}>Choose next battle</button>\n      </p>\n    </main>\n  );\n};\nexport default LoseBattle;","import React from 'react';\nimport Leaderboard from '../../Leaderboard';\n\nconst LoseGameNotBoss = (props) => {\n\n  return (\n    <main className=\"outcome lose-game\">\n      <div className=\"message\">\n        <h1>GAME OVER</h1>\n        <p>Uh oh! Three strikes you're out! You can try again from the beginning though.</p>\n        <p>You collected {props.score} points this game. However, because you did not make it to the final boss, your name will not be immortalized on the leaderboard.</p>\n\n        <Leaderboard leaders={props.leaders} />\n        <button className=\"primary\" onClick={() => {\n          props.resetGame()\n        }}>\n          Back to start</button>\n      </div>\n    </main >\n  );\n};\nexport default LoseGameNotBoss;","import React from 'react';\nimport Leaderboard from '../../Leaderboard';\n\nconst LoseGameToBoss = (props) => {\n\n  return (\n    <main className=\"outcome lose-game\">\n      <div className=\"message\">\n        <h1>DEFEAT</h1>\n        <p>You put up a valiant fight, but the boss was too much for you. Too bad. You can try again though!</p>\n        <p>You collected {props.score} points this game. However, because you did not defeat the final boss, your name will not be immortalized on the leaderboard.</p>\n\n        <Leaderboard leaders={props.leaders} />\n        <button className=\"primary\" onClick={() => {\n          props.resetGame()\n        }\n        }>Back to start</button>\n      </div>\n\n    </main>\n  );\n};\nexport default LoseGameToBoss;","import React, { useEffect } from \"react\";\n\n// Components\nimport WinGame from './WinGame';\nimport WinBattle from './WinBattle';\nimport LoseBattle from './LoseBattle';\nimport LoseGameNotBoss from './LoseGameNotBoss';\nimport LoseGameToBoss from './LoseGameToBoss';\n\n// Hooks\nimport useLeaders from '../../../hooks/useLeaders';\n\n// Styles\nimport './index.scss';\n\nfunction Outcome(props) {\n\n  const WINGAME = 'WINGAME'; // Player won the whole game\n  const LOSEBATTLE = 'LOSEBATTLE'; // Player lost an arena\n  const WINBATTLE = 'WINBATTLE'; // Player won the arena\n  const LOSEGAMENOTBOSS = \"LOSEGAMENOTBOSS\" // Player lost the game because they lost too many arenas before they reached a boss\n  const LOSEGAMETOBOSS = \"LOSEGAMETOBOSS\" // Player reached the boss but lost against the boss, thus losing the game\n  const WINALLARENAS = \"WINALLARENAS\" // Player has won 5 arenas and is about to face the boss\n\n  const PENDING = 'PENDING'; // Player has not finished an arena yet\n  const outcome = props.outcome;\n\n  // State Hooks\n  const { leaders, getLeaders } = useLeaders();\n\n  // Destructuring props\n  const { soundMedia, updateScore } = props;\n\n  useEffect(() => {\n    updateScore();\n    getLeaders();\n  }, []);\n\n  // Set music for win and lose conditions\n  useEffect(() => {\n    switch (outcome) {\n      case WINGAME:\n        soundMedia.current.src = '/sounds/win-game.mp3';\n        break;\n      case WINBATTLE:\n      case WINALLARENAS:\n        soundMedia.current.src = '/sounds/win-battle.mp3';\n        break;\n      case LOSEBATTLE:\n        soundMedia.current.src = '/sounds/lose-battle.mp3';\n        break;\n      case LOSEGAMENOTBOSS:\n      case LOSEGAMETOBOSS:\n        soundMedia.current.src = '/sounds/lose-game.mp3';\n        break;\n      default:\n        soundMedia.current.src = '/sounds/background-music.ogg';\n    };\n    soundMedia.current.loop = false;\n    // Cleanup function: return to normally scheduled programming after leaving the outcome screen\n    return (() => {\n      soundMedia.current.src = '/sounds/background-music.ogg';\n      soundMedia.current.loop = true;\n    });\n  }, [soundMedia, outcome]);\n\n\n  // For calculation purposes\n  const resultProps = {\n    par_time: props.arena.Difficulty.par_time,\n    player_time: props.currentBattle.time_seconds,\n    speedBonus: Math.round(Math.max(1, props.arena.Difficulty.par_time / props.currentBattle.time_seconds) * 100) / 100,\n    baseScore: props.arena.points,\n    lastResult: props.currentBattle.score\n  }\n\n  return (\n    <>\n      {outcome === WINGAME && <WinGame setMode={props.setMode} resetGame={props.resetGame} leaders={leaders} score={props.score} lastResult={props.currentBattle.score} soundMedia={props.soundMedia} />}\n      {outcome === LOSEBATTLE && <LoseBattle setMode={props.setMode} soundMedia={props.soundMedia} lastResult={props.currentBattle.score} score={props.score} />}\n      {outcome === WINBATTLE && <WinBattle allArenas={false} setMode={props.setMode} soundMedia={props.soundMedia} arena={props.arena} resultProps={resultProps} score={props.score} />}\n      {outcome === LOSEGAMENOTBOSS && <LoseGameNotBoss setMode={props.setMode} soundMedia={props.soundMedia} leaders={leaders} lastResult={props.currentBattle.score} score={props.score} resetGame={props.resetGame} />}\n      {outcome === LOSEGAMETOBOSS && <LoseGameToBoss setMode={props.setMode} soundMedia={props.soundMedia} leaders={leaders} lastResult={props.currentBattle.score} score={props.score} resetGame={props.resetGame} />}\n      {outcome === WINALLARENAS && <WinBattle allArenas={true} setMode={props.setMode} cleanArenas={props.cleanArenas} soundMedia={props.soundMedia} setArena={props.setArena} arena={props.arena} resultProps={resultProps} score={props.score}  />}\n      {outcome === PENDING && <main>Oops, looks like an error occurred. The result state shouldn't be pending!</main>}\n    </>\n  );\n}\n\nexport default Outcome;","import React from 'react';\n\nimport \"./Credits.scss\";\n\nfunction Credits(props) {\n  return (\n    <main className=\"credits\">\n      <div className=\"credits\">\n        <h1>Thanks for playing!</h1>\n        <h2>Credits:</h2> \n        <h3>Game Design, Programming & Styling</h3>\n        <div className=\"credits-container\">\n          <div className=\"credit\">\n            <h4>Helen Ouyang</h4>\n            <div className=\"logos\">\n              <a href=\"https://github.com/helenohyeah\" rel=\"noopener noreferrer\" target=\"_blank\">\n                <img className=\"logo\" alt=\"Github\" title=\"Github\" src=\"/images/github-logo.png\" />\n              </a>\n              <a href=\"https://www.linkedin.com/in/helenouyang/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                <img className=\"logo\" alt=\"LinkedIn\" title=\"LinkedIn\" src=\"/images/linkedin-logo.png\" />\n              </a>\n            </div>\n            <img className=\"portrait\" src=\"/images/helen.png\" alt=\"Helen\" />\n          </div>\n          <div className=\"credit\">\n            <img className=\"portrait\" src=\"/images/jillian.png\" alt=\"Jillian\" />\n            <h4>Jillian Martin</h4>\n            <div className=\"logos\">\n              <a href=\"https://github.com/jilliankmartin\" rel=\"noopener noreferrer\" target=\"_blank\">\n                <img className=\"logo\" alt=\"Github\" title=\"Github\" src=\"/images/github-logo.png\" />\n              </a>\n              <a href=\"https://www.linkedin.com/in/jilliankmartin/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                <img className=\"logo\" alt=\"Linkedin\" title=\"LinkedIn\" src=\"/images/linkedin-logo.png\" />\n              </a>\n            </div>\n          </div>\n          <div className=\"credit\">\n            <h4>Sherwin Kwan</h4>\n            <div className=\"logos\">\n              <a href=\"https://github.com/sherwin-kwan\" rel=\"noopener noreferrer\" target=\"_blank\">\n                <img className=\"logo\" alt=\"Github\" title=\"Github\" src=\"/images/github-logo.png\" />\n              </a>\n              <a href=\"https://www.linkedin.com/in/sherwinkwan/\" rel=\"noopener noreferrer\" target=\"_blank\">\n                <img className=\"logo\" alt=\"Linkedin\" title=\"LinkedIn\" src=\"/images/linkedin-logo.png\" />\n              </a>\n            </div>\n            <img className=\"portrait\" src=\"/images/sherwin.png\" alt=\"Sherwin\" />\n          </div>\n        </div>\n        <p>Special thanks to Travis Borsa, Andy Lindsay, Brian Chang, James Cash, Dmitry Besson, John Lee, Rob Schwitzer, Afshan Khatoon, and our friends and family for putting up with us being AWOL while we built this game.</p>\n        <button\n          className=\"primary\"\n          onClick={() => props.setMode(\"START\")}\n        >\n          Back to Start\n        </button>\n        \n        <p className=\"footnotes\">(C) 2020 Helen Ouyang, Jillian Martin, and Sherwin Kwan. <br />\n        Keyboard Warrior is free and open-source software. <a href=\"\">See source repo</a>. <br />\n        We welcome collaboration! If you spot a bug, feel free to report it <a href=\"https://github.com/sherwin-kwan/word-game/issues\">here! </a><br />\n        (Or if you're feeling really hard core, fix the code and send us a pull request!)</p>\n        \n      </div>\n    </main>\n  );\n}\n\nexport default Credits;\n","import React, { useEffect } from 'react';\n\n// Styles\nimport './Instructions.scss'\n\n// Hooks\nimport useLeaders from '../../hooks/useLeaders';\n\n// Components\nimport Leaderboard from '../Leaderboard';\n\nfunction Instructions(props) {\n\n  const { leaders, getLeaders } = useLeaders();\n\n  useEffect(() => {\n    getLeaders();\n  }, []);\n\n  return (\n    <main className=\"instructions\">\n      <div className=\"instructions\">\n        <h1>Instructions</h1>\n        <h2>Your Objective:</h2>\n        <p>Win 5 battles to get to the final boss. Then beat the boss to win the game!</p>\n        <img src=\"/images/progress-bar.png\" alt=\"Progress bar\" />\n        <h2>Battling:</h2>\n        <p>Type the words that show up to attack for 10 damage or heal 20 health.</p>\n        <img src=\"/images/words-to-type.png\" alt=\"Battle arena\" />\n        <h2>Scoring:</h2>\n        <p>Earn more points by choosing more difficult arenas.</p>\n        <img src=\"/images/difficulty-and-points.png\" alt=\"Difficulty and points\" />\n        <p>\"30 PTS\" is the base score you get for winning the battle.</p>\n        <p>If you beat the game faster, you'll get a bonus multiplier and top the leaderboards!</p>\n        <p>CURRENT LEADERS</p>\n        <Leaderboard leaders={leaders} />\n        <button\n          className=\"primary\"\n          onClick={() => props.setMode(\"START\")}\n        >\n          {`Got it? Let's play!`}\n        </button>\n      </div>\n    </main>\n  );\n}\n\nexport default Instructions;","import React from 'react';\n\nconst MuteButton = (props) => {\n\n  const { music, setMusic } = props;\n\n  return (\n    <aside className=\"mute-music\" >\n      <img src={music ? \"/images/unmute-music.png\" : \"/images/mute-music.png\"}\n        onClick={() => setMusic(prev => !prev)}\n        alt={music ? \"mute music\" : \"unmute music\"}\n      />\n    </aside>\n  )\n};\n\nexport default MuteButton;","import React, { useEffect, useState } from 'react';\nimport \"./Transition.scss\";\n\nfunction Transition(props) {\n\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const patienceTimeout = setTimeout(() => {\n      setMessage(props.message || \"Please be patient while the next screen loads\");\n    }, 1000);\n    return () => clearTimeout(patienceTimeout);\n  }, []);\n\n  return (\n    <main className=\"transition\">\n      <img src=\"/images/status.png\" alt=\"Loading\" />\n      {/* Displays after 1 second */}\n      <p>{message}</p>\n    </main>\n  );\n}\n\nexport default Transition;","// Libraries\nimport React, { useEffect, useRef } from \"react\";\n\n//helpers\nimport { countArenasBeaten } from \"../../helpers/countArenasCompleted\";\n\n//Hooks\nimport useBattles from '../../hooks/useBattles';\nimport useGameMode from \"../../hooks/useGameMode\";\nimport useArena from \"../../hooks/useArena\";\nimport useOutcome from '../../hooks/useOutcome';\nimport useGame from '../../hooks/useGame';\nimport useMusic from '../../hooks/useMusic';\n\n// Styles\nimport './index.scss';\n\n// Components\nimport StartGame from './StartGame';\nimport Map from './Map';\nimport Arena from './Arena';\nimport Outcome from './Outcome'\nimport Credits from './Credits';\nimport Instructions from './Instructions';\nimport MuteButton from './MuteButton';\nimport Transition from './Transition';\n\n// Contexts\n// import GameContext from '../../helpers/gameContext';\n\nfunction Canvas(props) {\n\n  // Modes\n  const START = \"START\";\n  const MAP = \"MAP\";\n  const ARENA = \"ARENA\";\n  const OUTCOME = \"OUTCOME\";\n  const CREDITS = \"CREDITS\";\n  const INSTRUCTIONS = \"INSTRUCTIONS\";\n  const TRANSITION = \"TRANSITION\";\n\n\n  //hooks\n  const { mode, setMode } = useGameMode(\"START\")\n  const { arenas, setArenas, arena, setArena, cleanArenas } = useArena();\n  const { outcome, setOutcome } = useOutcome('PENDING');\n  const { startBattle, endBattle, style, handleAttackAnimation, currentBattle, setCurrentBattle } = useBattles();\n  const { game, setGame, startGame, score, setScore, updateScore, lastResult } = useGame();\n  const { music, setMusic } = useMusic();\n\n  // Load background music\n  const soundMedia = useRef(null);\n\n  // Sub-modes of the outcome mode\n  const WINGAME = 'WINGAME'; // Player won the whole game\n  const LOSEBATTLE = 'LOSEBATTLE'; // Player lost an arena\n  const WINBATTLE = 'WINBATTLE'; // Player won the arena\n  const LOSEGAMENOTBOSS = \"LOSEGAMENOTBOSS\" // Player lost the game because they lost too many arenas before they reached a boss\n  const LOSEGAMETOBOSS = \"LOSEGAMETOBOSS\" // Player reached the boss but lost against the boss, thus losing the game\n  const WINALLARENAS = \"WINALLARENAS\" // Player has won 5 arenas and is about to face the boss\n\n  useEffect(() => {\n\n    async function playMusic() {\n\n      // Set initial music source\n\n      if (mode === OUTCOME) {\n        switch (outcome) {\n          case WINGAME:\n            soundMedia.current.src = '/sounds/win-game.mp3';\n            break;\n          case WINBATTLE:\n          case WINALLARENAS:\n            soundMedia.current.src = '/sounds/win-battle.mp3';\n            break;\n          case LOSEBATTLE:\n            soundMedia.current.src = '/sounds/lose-battle.mp3';\n            break;\n          case LOSEGAMENOTBOSS:\n          case LOSEGAMETOBOSS:\n            soundMedia.current.src = '/sounds/lose-game.mp3';\n            break;\n          default:\n            break;\n        }\n        soundMedia.current.loop = false;\n      } else {\n        soundMedia.current.src = '/sounds/background-music.mp3';\n        soundMedia.current.loop = true;\n      }\n\n      // Some browsers do not allow auto-play, if promise rejects send a console log\n      try {\n        if (soundMedia.current.paused) await soundMedia.current.play();\n      } catch (err) {\n        console.log('Music could not be played');\n      }\n\n    };\n\n    // Start music if curretly not playing\n    playMusic();\n  }, [mode]);\n\n  useEffect(() => {\n    const aaa = arena ? true : false;\n    console.log('Props.arena is ', arena, 'and this is true? ', aaa);\n  }, [mode]);\n\n  useEffect(() => {\n    soundMedia.current.volume = music ? 0.1 : 0.0;\n  }, [music]);\n\n  // reset game function\n  const resetGameState = function () {\n    setMode(\"START\");\n    setGame({});\n    setArena([]);\n    setScore(0);\n    setArenas(cleanArenas.filter(arena => arena.name !== 'Boss'));\n    setOutcome(\"PENDING\");\n    setCurrentBattle([]);\n  };\n\n  return (\n    <>\n      <audio autoPlay loop ref={soundMedia} src='/sounds/background-music.mp3' >\n        Your browser does not support HTML audio.\n      </audio>\n      <div className=\"canvas\">\n        <MuteButton\n          music={music}\n          setMusic={setMusic}\n        />\n        {mode === START && <StartGame\n          setMode={setMode}\n          setGame={setGame}\n          game={game}\n          onSubmit={startGame} />\n        }\n        {mode === MAP && <Map\n          setGameMode={setMode}\n          score={score}\n          game={game}\n          updateScore={updateScore}\n          arena={arena}\n          arenas={arenas}\n          setArena={setArena}\n          arenasBeaten={countArenasBeaten(arenas)} />\n        }\n        {mode === ARENA && <Arena\n          setOutcome={setOutcome}\n          setScore={setScore}\n          initialPlayerHealth={100}\n          challengerHealth={100}\n          currentBattle={currentBattle}\n          setCurrentBattle={setCurrentBattle}\n          startBattle={startBattle}\n          endBattle={endBattle}\n          style={style}\n          handleAttackAnimation={handleAttackAnimation}\n          setMode={setMode}\n          arena={arena}\n          arenas={arenas}\n          setArenas={setArenas}\n          game={game}\n        />}\n        {mode === TRANSITION && <Transition\n          outcome={outcome}\n        />}\n        {mode === OUTCOME && <Outcome\n          cleanArenas={cleanArenas}\n          outcome={outcome}\n          lastResult={lastResult}\n          soundMedia={soundMedia}\n          setMode={setMode}\n          score={score}\n          updateScore={updateScore}\n          resetGame={resetGameState}\n          currentBattle={currentBattle}\n          arena={arena}\n          setArena={setArena}\n          cleanArenas={cleanArenas}\n        />}\n        {mode === CREDITS && <Credits\n          setMode={setMode}\n        />}\n        {mode === INSTRUCTIONS && <Instructions\n          setMode={setMode}\n          arena={arena}\n        />}\n      </div>\n    </>\n  );\n}\n\nexport default Canvas;\n","// shifts between each of the game modes: start, map, arena and result\n\nimport { useState } from \"react\";\n\nexport default function useGameMode(initial) {\n\n  const [mode, setMode] = useState(initial)\n\n  return { mode, setMode};\n}\n","import { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nexport default function useArena() {\n  \n  const [ arenas, setArenas ] = useState([]);\n  const [ arena, setArena ] = useState({}); // controls which arena battle the player in\n  const [ cleanArenas, setCleanArenas ] = useState([]); //the Arenas as they are in the DB - without the key beaten. This is the state that should be used at the beginning of a game\n  \n  // Get Arena data from DB\n  useEffect(() => {\n    axios.get('/api/arenas')\n      .then((data) => {\n        // Remove Boss Arena from response\n        const normalArenas = data.data.filter(arena => arena.name !== 'Boss');\n        setArenas(normalArenas);\n        setCleanArenas(data.data);\n      })\n      .catch(err => console.log(\"Error getting Arena data: \", err));\n  }, []);\n\n  // function handleBossArena () {\n  //   const bossArena = cleanArenas.find(arena => arena.name === 'Boss');\n  //   return bossArena;\n  // }\n\n  return { arenas, setArenas, arena, setArena, cleanArenas };\n}\n\n\n\n","import { useState } from \"react\";\n\nexport default function useOutcome(initial) {\n  \n  const [outcome, setOutcome] = useState(initial);\n\n  return { outcome, setOutcome }\n}","// records battles completed\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function useBattles() {\n\n  const [currentBattle, setCurrentBattle] = useState({});\n  const [style, setStyle] = useState({ player: { attack: {}, heal: {} }, challenger: {} });\n\n  function startBattle(game_id, arena_id) {\n    const battle = {\n      game_id,\n      arena_id,\n      start_time: new Date()\n    };\n    return battle;\n  }\n\n  async function endBattle(win, inputBattle) {\n    console.log('input battle is: ', inputBattle);\n    const battle = {\n      ...inputBattle,\n      win,\n      end_time: new Date()\n    };\n    try {\n      console.log(`Battle is: ${battle}`);\n      const res = await axios.post('/api/battles', battle);\n      const outputBattle = {\n        ...battle,\n        score: res.data.score,\n        time_seconds: res.data.time_seconds\n      };\n      return outputBattle;\n    } catch (err) {\n      console.log(\"Error Posting Battle:\", err)\n    }\n  }\n\n  function handleAttackAnimation(attacker, action) {\n    const animation = {\n      visibility: 'visible',\n      animation: 'blink 1s steps(4, end) 0s infinite'\n    };\n    const hide = { visibility: 'hidden '};\n\n    if (attacker === 'player') {\n      setStyle(prev => {\n        return { ...prev, [attacker]: { [action]: animation } };\n      });\n      setTimeout(() => {\n        setStyle(prev => {\n          return { ...prev, [attacker]: { [action]: hide } };\n        });\n      }, 1000);\n    } else {\n      setStyle(prev => {\n        return { ...prev, [attacker]: animation };\n      });\n      setTimeout(() => {\n        setStyle(prev => {\n          return { ...prev, [attacker]: hide };\n        });\n      }, 1000);\n    }\n  }\n\n  return { startBattle, endBattle, currentBattle, setCurrentBattle, style, handleAttackAnimation };\n}\n","import { useState } from \"react\";\nimport axios from 'axios';\n\nexport default function useGame() {\n\n  const [game, setGame] = useState({});\n  const [score, setScore] = useState(0);\n\n  function startGame(name, setMode) {\n\n    const newGame = { player_name: name }\n\n    setMode(\"TRANSITION\");\n    axios.post('/api/games', newGame)\n      .then(data => {\n        // The API will send back the ID returned from the database. This can be stored in state\n        const newGameId = data.data;\n        setGame((prev) => {\n          return {\n            ...prev,\n            id: newGameId\n          }\n        });\n        setMode(\"MAP\");\n      })\n      .catch(err => console.log(\"Error posting Game data: \", err));\n\n  }\n\n  async function updateScore() {\n    try {\n      const res = await axios.get(`/api/game/${game.id}`);\n      setScore(Number(res.data[0].score));\n    } catch (err) {\n      console.log(err.message);\n      setScore(NaN); // Signifies that score could not be found\n    }\n  }\n\n  return { game, setGame, startGame, score, setScore, updateScore };\n}","import { useState } from \"react\";\n\nexport default function useMusic() {\n\n  const [ music, setMusic ] = useState(true)\n\n  return { music, setMusic }\n}\n","// Libraries\nimport React from \"react\";\n\n// Components\nimport Canvas from './Canvas';\n\nfunction Application() {\n  return (\n    <div className=\"app\">\n        <Canvas />\n    </div>\n  );\n}\n\nexport default Application;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Libraries\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Application from './components/Application';\nimport reportWebVitals from './reportWebVitals';\nimport axios from 'axios';\n\n// Styles\nimport './styles/index.scss';\n\n// Axios configuration.\n// Enter the URL of your API (i.e. the files in the /server folder) here. This can be a local server (which runs on port 3001 by default)\n// Or a server where you have deployed the API.\naxios.defaults.baseURL = 'https://keyboard-warrior-api.herokuapp.com';\naxios.interceptors.request.use(req => {\n  return req;\n}, err => {\n  console.log('Request Error:', err);\n  return Promise.reject(err);\n});\naxios.interceptors.response.use(res => {\n  return res;\n}, err => {\n  console.log('Response Error:', err);\n  return Promise.reject(err);\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}