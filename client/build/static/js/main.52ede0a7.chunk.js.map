{"version":3,"sources":["helpers/countArenasCompleted.js","hooks/useBattles.js","hooks/useLeaders.js","components/TempNavBar.js","components/Canvas/StartGame.js","components/ArenaDoor.js","components/DoorSlider.js","components/ArenaDoorList.js","hooks/useArenaDoor.js","components/MapProgressBar.js","components/Canvas/Map.js","components/HealthBar.js","components/Avatar.js","components/PlayerAction.js","components/PlayerActionList.js","hooks/useInputMatcher.js","components/ChallengerActionList.js","components/TextInput.js","helpers/makeNewArenas.js","components/Canvas/Arena.js","hooks/useChallengerAction.js","components/Leaderboard.js","components/Canvas/Outcome/WinGame.js","components/Canvas/Outcome/WinBattle.js","components/Canvas/Outcome/LoseBattle.js","components/Canvas/Outcome/LoseGameNotBoss.js","components/Canvas/Outcome/LoseGameToBoss.js","components/Canvas/Outcome/WinAllArenas.js","components/Canvas/Outcome/index.js","components/Canvas/Credits.js","components/Canvas/Instructions.js","components/Canvas/MuteButton.js","components/Canvas/Transition.js","components/Canvas/index.js","hooks/useGameMode.js","hooks/useArena.js","hooks/useOutcome.js","hooks/useGame.js","hooks/useMusic.js","components/Application.js","reportWebVitals.js","index.js"],"names":["countArenasLost","arenas","count","beaten","countArenasBeaten","useBattles","useState","currentBattle","setCurrentBattle","player","attack","heal","challenger","style","setStyle","win","a","battle","end_time","Date","axios","post","res","data","score","console","log","startBattle","game_id","arena_id","start_time","endBattle","handleAttackAnimation","attacker","action","animation","visibility","hide","prev","setTimeout","useLeaders","page","player_name","leaders","setLeaders","appendString","defaults","baseURL","get","getLeaders","TempNavBar","props","onClick","StartGame","className","onSubmit","event","preventDefault","game","setMode","htmlFor","onChange","setGame","target","value","type","id","placeholder","name","required","disabled","Object","keys","length","ArenaDoor","currentDoor","doorTagArray","setCurrentDoor","arena","doorClassName","src","title","setGameMode","setArena","arena_card","alt","Difficulty","icon","points","DoorSlider","img","selected","index","ArenaDoorList","handleCurrentDoor","door","useArenaDoor","map","toLowerCase","replace","sliderDots","ind","StepProgressBar","playerNotch","playerLevel","parseInt","this","arenasBeaten","percent","filledBackground","transition","accomplished","filter","width","React","Component","Map","useEffect","updateScore","class","HealthBar","animationDelay","animationDuration","height","skills","level","health","colors","Avatar","filename","PlayerAction","content","word","PlayerActionList","handleLetterMatch","handleWordMatch","playerInput","playerActions","find","slice","indexOf","match","wordDOM","forEach","actions","ChallengerActionList","timerBarStyles","position","left","percentage","backgroundColor","transitionProperty","transitionDuration","duration","transitionTimingFunction","TextInput","autoFocus","e","updateToArenaCompleted","arenaCompleted","winLose","newArenasObj","newArenaTrue","push","newArenaFalse","Arena","setPlayerActions","wordIndex","initialPlayerHealth","challengerHealth","setHealth","setPlayerInput","initial","attackTime","setAttackTime","useChallengerAction","attack_time_ms","challengerTimer","setChallengerTimer","getNextWord","changeHealth","fighter","hp","newHealth","Math","min","max","setOutcome","setArenas","returnedScore","setLastResult","handleBattleOver","interval","setInterval","damage_per_hit","clearInterval","actionIndex","words","rawWords","initialWordsState","challenger_name","challenger_sprite","Leaderboard","leaderStats","leader","WinGame","soundMedia","current","lastResult","resetGame","WinBattle","LoseBattle","LoseGameNotBoss","LoseGameToBoss","WinAllArenas","Outcome","outcome","Credits","href","Instructions","MuteButton","music","setMusic","Transition","includes","Canvas","mode","useGameMode","cleanArenas","setCleanArenas","then","normalArenas","catch","err","handleBossArena","useArena","useOutcome","battles","setBattles","setScore","Number","message","NaN","startGame","newGame","newGameId","useGame","useMusic","useRef","loop","play","volume","autoPlay","ref","Application","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52ede0a7.chunk.js","sourcesContent":["// const arenas = [\n//   {\n//     name: \"Hogwarts\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\",\n//     beaten: false\n//   },\n//   {\n//     name: \"Indigo Plateau\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\",\n//     beaten: true\n//   },\n//   {\n//     name: \"Minas Tirith\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\"\n//   },\n//   {\n//     name: \"Final Destination\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\",\n//   },\n//   {\n//     name: \"Hotel California\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\",\n//   }\n// ]\n\nexport function countArenasLost(arenas) {\n  let count = 0;\n  for (const arena of arenas) {\n    if (arena.beaten === false) {\n      count +=1;\n    }\n  }\n  return count;\n};\n\nexport function countArenasBeaten(arenas) {\n  let count = 0;\n  for (const arena of arenas) {\n    if (arena.beaten === true) {\n      count +=1;\n    }\n  }\n  return count;\n};\n\n// console.log(countArenasBeaten(arenas))","// records battles completed\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function useBattles() {\n\n  const [currentBattle, setCurrentBattle] = useState({});\n  const [style, setStyle] = useState({ player: { attack: {}, heal: {} }, challenger: {} });\n\n  function startBattle(game_id, arena_id) {\n    const battle = {\n      game_id,\n      arena_id,\n      start_time: new Date()\n    };\n    console.log('battle', battle)\n    setCurrentBattle(battle);\n  }\n\n  async function endBattle(win) {\n    const battle = {\n      ...currentBattle,\n      win,\n      end_time: new Date()\n    };\n    try {\n      const res = await axios.post('/api/battles', battle);\n      setCurrentBattle(battle);\n      return res.data.score;\n    } catch (err) {\n      console.log(\"Error Posting Battle:\", err)\n    }\n  }\n\n  function handleAttackAnimation(attacker, action) {\n    const animation = {\n      visibility: 'visible',\n      animation: 'blink 1s steps(4, end) 0s infinite'\n    };\n    const hide = { visibility: 'hidden '};\n\n    if (attacker === 'player') {\n      setStyle(prev => {\n        return { ...prev, [attacker]: { [action]: animation } };\n      });\n      setTimeout(() => {\n        setStyle(prev => {\n          return { ...prev, [attacker]: { [action]: hide } };\n        });\n      }, 1000);\n    } else {\n      setStyle(prev => {\n        return { ...prev, [attacker]: animation };\n      });\n      setTimeout(() => {\n        setStyle(prev => {\n          return { ...prev, [attacker]: hide };\n        });\n      }, 1000);\n    }\n  }\n\n  return { startBattle, endBattle, setCurrentBattle, style, handleAttackAnimation };\n}\n","import { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nexport default function useLeaders(page) {\n\n  // Initialize state as empty array. Leaders will hold an array of up to 10 people's names and their scores.\n  const [leaders, setLeaders] = useState([{\n    player_name: 'Data loading',\n    score: 'N/A'\n  }]);\n\n  async function getLeaders(page) {\n    const appendString = page  ? `?page=${page}`: '';\n    axios.defaults.baseURL = 'http://localhost:3001';\n    const leaders = await axios.get(`/api/leaders${appendString}`);\n    setLeaders(leaders.data);\n  };\n\n  return { leaders, getLeaders };\n};","import React from 'react';\n\nconst TempNavBar = (props) => {\n  return (\n    <>\n    <button onClick={() => { props.onClick(\"START\") }}>To Start</button>\n      <button onClick={() => { props.onClick(\"MAP\") }}>To Map</button>\n      <button onClick={() => { props.onClick(\"ARENA\") }}>To Arena</button>\n      <button onClick={() => { props.onClick(\"OUTCOME\") }}>To Outcome</button>\n    </>\n  );\n};\n\nexport default TempNavBar;","// Libraries\nimport React from \"react\";\n\n// Styles\nimport './StartGame.scss';\n\nfunction StartGame(props) {\n\n  // Disables Start Game button if empty player name\n  const isDisabled = () => Object.keys(props.game).length === 0 || props.game.player_name.length === 0;\n\n  return (\n    <main className=\"start-game\">\n      <h1>A Typing Game</h1>\n      <menu>\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          props.onSubmit(props.game.player_name)\n          props.setMode(\"MAP\")\n          }\n          }>\n          <label htmlFor=\"name\">Player Name:</label><br/>\n          <input \n            onChange={(event) => props.setGame({player_name: event.target.value})}\n            value={props.game.player_name || ''}\n            type=\"text\" \n            id=\"name\" \n            placeholder=\"Enter player name\" \n            name=\"name\"\n            required\n          /><br />\n          <input\n            className=\"primary\"\n            type=\"submit\"\n            value=\"Start Game\"\n            disabled={isDisabled()}\n          />\n        </form>\n        <button className=\"primary\" onClick={() => props.setMode(\"CREDITS\")}>Credits</button>\n        <button className=\"primary\" onClick={() => props.setMode(\"INSTRUCTIONS\")}>Instructions</button>\n        (Buttons below don't do anything yet:)\n        <button className=\"primary\">Leaderboards</button>\n        <button className=\"primary\">Settings? Mute?</button>\n      </menu>\n    </main>\n  );\n}\n\nexport default StartGame;","// Libraries\nimport React from \"react\";\n\nfunction ArenaDoor(props) {\n\n  const { arenas, doorTagArray, currentDoor, setCurrentDoor } = props;\n\n  console.log('Arenas is: ', arenas);\n  const arena = arenas[currentDoor];\n  console.log('Arena is: ', arena);\n  console.log('Current index is: ', currentDoor);\n\n  const pointsIcon = '/images/green-diamond.png';\n  const disabled = (typeof arena.beaten === 'boolean'); // Either \"true\" or \"false\" showing that the player has already either won or lost\n  // in this arena, will cause the arena door to be disabled so player cannot enter it again\n  const doorClassName = disabled ? \"card card-disabled\" : \"card\";\n\n  const setPreviousDoor = () => {\n    console.log('Changing to previous door');\n    setCurrentDoor(prev => (prev !== 0) ? prev - 1 : prev);\n  };\n\n  const setNextDoor = () => {\n    setCurrentDoor(prev => (prev !== arenas.length - 1) ? prev + 1 : prev);\n  };\n\n  return (\n    <div className=\"door\">\n      <img className=\"door-arrow\" src=\"/images/left_arrow_circle.png\" onClick={setPreviousDoor} />\n      <div\n        className={doorClassName}\n        title={disabled ? `No rematches! Please choose another arena` : `Enter arena`}\n        onClick={() => {\n          if (!disabled) {\n            props.setGameMode(\"ARENA\");\n            props.setArena(arena);\n          }\n        }}>\n        <h3>{arena.name}</h3>\n        <img\n          className=\"door-image\"\n          src={arena.arena_card}\n          alt={arena.name}\n        />\n        <footer>\n          {!props.beaten &&\n            <>\n              <div className=\"difficulty\">\n                <img\n                  src={arena.Difficulty.icon}\n                  alt={arena.Difficulty.name}\n                />\n                {arena.Difficulty.name}\n              </div>\n              <div className=\"points\">\n                <img\n                  src={pointsIcon}\n                  alt={arena.points + \" points\"}\n                />\n                {arena.points + \" PTS\"}\n              </div>\n            </>}\n          {(arena.beaten === true) && <aside>Congrats, you beat this level!</aside>}\n          {(arena.beaten === false) && <aside>You were defeated!</aside>}\n        </footer>\n      </div>\n      <img className=\"door-arrow\" src=\"/images/right_arrow_circle.png\" onClick={setNextDoor} />\n    </div>\n  );\n}\n\nexport default ArenaDoor;","import React, { useEffect } from \"react\";\n\nfunction DoorSlider(props) {\n\n  const img = (props.selected) ? \"/images/yellow-dot.png\" : \"/images/grey-dot.png\";\n  const className = (props.selected) ? \"selected\" : \"\";\n\n  return (\n    <img\n      className={className}\n      alt=\"door\"\n      src={img}\n      onClick={() => props.setCurrentDoor(props.index)}\n    />\n  )\n}\n\nexport default DoorSlider;","// Libraries\nimport React, { useState, useEffect } from \"react\";\n\n// Components\nimport ArenaDoor from './ArenaDoor';\nimport DoorSlider from \"./DoorSlider\";\n\n// Hooks\nimport useArenaDoor from \"../hooks/useArenaDoor\";\n\nfunction ArenaDoorList(props) {\n\n  const { currentDoor, setCurrentDoor, handleCurrentDoor } = useArenaDoor();\n\n  // Creating an array of doors in dash-case, which can be used as arguments for the setCurrentDoor() function to display different arena doors\n  const doorTagArray = props.arenas.map(arena => arena.name.toLowerCase().replace(/\\s/g, '-'));\n\n  const sliderDots = props.arenas.map((arena, ind) => {\n    // const img = (handleCurrentDoor(doorTag)) ? \"/images/yellow-dot.png\" : \"/images/grey-dot.png\";\n    return (<DoorSlider\n      key={arena.name + '-slider'}\n      index={ind}\n      selected={handleCurrentDoor(ind)}\n      setCurrentDoor={setCurrentDoor}\n    />);\n  });\n\n  return (\n    <>\n      <h2>Choose your arena!</h2>\n      <div className=\"door-slider-dots\">\n        {sliderDots}\n      </div>\n      <div className=\"doors-container\">\n        <ArenaDoor\n          setGameMode={props.setGameMode}\n          currentDoor={currentDoor}\n          setCurrentDoor={setCurrentDoor}\n          arenas={props.arenas}\n          setArena={props.setArena}\n          doorTagArray={doorTagArray}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default ArenaDoorList;","import { useState, useEffect } from \"react\";\n\nexport default function useArenaDoor() {\n\n  const [currentDoor, setCurrentDoor] = useState(0);\n  \n  // Returns true if door is selected\n  function handleCurrentDoor(door) {\n    if (door === currentDoor) return true;\n    return false;\n  }\n\n  return { currentDoor, setCurrentDoor, handleCurrentDoor }\n}","import React from \"react\";\nimport \"react-step-progress-bar/styles.css\";\nimport { ProgressBar, Step } from \"react-step-progress-bar\";\n\nexport class StepProgressBar extends React.Component { \n  render() {\n    const regularNotch1 = \"/images/one.png\"\n    const regularNotch2 = \"/images/two.png\"\n    const regularNotch3 = \"/images/three.png\"\n    const regularNotch4 = \"/images/four.png\"\n    const regularNotch5 = \"/images/five.png\"\n    const playerNotch = \"https://vignette.wikia.nocookie.net/pkmnshuffle/images/9/97/Pikachu_%28Smiling%29.png/revision/latest?cb=20170410234508\"\n    const bossNotch = \"/images/cave-dweller-worm.png\"\n    const playerLevel = parseInt(this.props.arenasBeaten) + 1\n    return (\n      <ProgressBar\n        percent={parseInt(this.props.arenasBeaten) * 20}\n        filledBackground=\"linear-gradient(to right, #fefb72, #f0bb31)\"\n      >\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              width=\"30\"\n              src={playerLevel === 1 ? playerNotch : regularNotch1}\n              alt=\"Level 1\"\n            />\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              width=\"30\"\n              src={playerLevel === 2 ? playerNotch : regularNotch2}\n              alt=\"Level 2\"\n            />\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              width=\"30\"\n              src={playerLevel === 3 ? playerNotch : regularNotch3}\n              alt=\"Level 3\"\n            />\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              width=\"30\"\n              src={playerLevel === 4 ? playerNotch : regularNotch4}\n              alt=\"Level 4\"\n            />\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <>\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              width=\"30\"\n              src={playerLevel === 5 ? playerNotch : regularNotch5}\n              alt=\"Level 5\"\n            />\n            </>\n          )}\n        </Step>\n        <Step transition=\"scale\">\n          {({ accomplished }) => (\n            <img\n              style={{ filter: `grayscale(${accomplished ? 0 : 80}%)` }}\n              width=\"30\"\n              src={playerLevel === 6 ? playerNotch : bossNotch}\n              alt=\"Level 6\"\n            />\n          )}\n        </Step>\n      </ProgressBar>\n    );\n  }\n}","// Libraries\nimport React, { useEffect } from \"react\";\n\n// Components\n// import ProgressBar from '../ProgressBar';\nimport ArenaDoorList from '../ArenaDoorList';\nimport { StepProgressBar } from \"../MapProgressBar\";\nimport useGame from '../../hooks/useGame';\n\n// Styles\nimport './Map.scss';\n\n// Hooks\n\nfunction Map(props) {\n\n  useEffect(() => {\n    props.updateScore();\n  }, [props.game]);\n\n  return (\n    <main className=\"map\">\n      <StepProgressBar\n        arenasBeaten={props.arenasBeaten}\n      />\n      <ArenaDoorList\n        arenas={props.arenas}\n        setGameMode={props.setGameMode}\n        arena={props.arena}\n        setArena={props.setArena}\n      />\n      <p class=\"score\">You currently have <strong>{props.score}</strong> points. Keep it up!</p>\n    </main>\n  );\n}\n\nexport default Map;","// Libraries\nimport React from \"react\";\nimport SkillBar from 'react-skillbars';\nimport './HealthBar.scss';\n\nfunction HealthBar(props) {\n  const colors = {\n    \"bar\": \"#00E436\",\n    \"title\": {\n      \"text\": \"#000\",\n      \"background\": \"#fff\"\n    }\n  };\n\n  return (\n    <div className=\"health-bar\">\n      <img src=\"/images/red-cross.png\" alt=\"Health\" onClick={() => props.onClick(10)} />\n      <SkillBar animationDelay={0} animationDuration={200} height={'2rem'} skills={[{type: 'Health', level: props.health}]} colors={colors}/>\n    </div>\n  );\n}\n\nexport default HealthBar;","// Libraries\nimport React from \"react\";\n\nfunction Avatar(props) {\n  return (\n    <>\n      <h2>{props.name}</h2>\n      <img src={props.filename} />\n    </>\n  );\n}\n\nexport default Avatar;","// Libraries\nimport React from 'react';\nimport { Markup } from 'interweave';\n\nfunction PlayerAction(props) {\n  return (\n    <li>\n      {/* <div className=\"action-icon\">{props.name}</div> */}\n      <img src={props.icon} />\n      <div className=\"action-word\">\n        <Markup className=\"action-word\" content={props.word} />\n      </div>\n    </li>\n  );\n}\n\nexport default PlayerAction;","// Libraries\nimport React, { useEffect, useRef } from \"react\";\n\n// Components\nimport PlayerAction from './PlayerAction';\n\n// Hooks\nimport useInputMatcher from '../hooks/useInputMatcher';\n\nfunction PlayerActionList(props) {\n\n  const { handleLetterMatch } = useInputMatcher();\n  const { playerInput, playerActions } = props;\n\n  const match = handleLetterMatch(playerInput, playerActions);\n  \n  // Create a wordDOM with style applied to matched letters\n  if (match >= 0) {\n    // const matchedActionIndex = playerActions.findIndex(action => action.word.slice(0, playerInput.length) === playerInput.toLowerCase());\n    const action = playerActions[match];\n    action.wordDOM = `<pre class=\"match\">${action.word.slice(0, playerInput.length)}</pre><pre>${action.word.slice(playerInput.length)}</pre>`;\n  // Reset style if letters do not match\n  } else {\n    playerActions.forEach(action => action.wordDOM = action.word);\n  }\n\n  const actions = playerActions.map(action => {\n    return (\n      <PlayerAction\n        key={action.name}\n        name={action.name}\n        icon={action.icon}\n        word={action.wordDOM || action.word}\n      />\n    )\n  });\n\n  return (\n    <>\n      <ul>\n        {actions}\n      </ul>\n    </>\n  )\n}\n\nexport default PlayerActionList;","export default function useInputMatcher() {\n\n  // playerInput: \"word\"\n  // playerActions: [{ name: \"attack\", word: \"word\"}, { name: \"heal\", word: \"girl\" }]\n\n  // Check for letter matches and returns true if a match is found. \n  // Note: This function has been changed (Sherwin note 2020-11-25)\n  // Now it returns the index of the matched action (0 = attack, 1 = heal) or else returns -1 if no match is found\n  const handleLetterMatch = (playerInput, playerActions) => {\n    if (playerInput.length > 0) {\n      const actionWordSlices = playerActions.map(action => action.word.slice(0, playerInput.length));\n      return actionWordSlices.indexOf(playerInput.toLowerCase());\n    }\n    return -1;\n  }\n\n  // Check for word matches and returns the action name if a match is found\n  const handleWordMatch = (playerInput, playerActions) => {\n    return playerActions.find(action => action.word === playerInput.toLowerCase());\n  }\n\n  return {\n    handleWordMatch,\n    handleLetterMatch\n  }\n}\n","// Libraries\nimport React from \"react\";\n\n\nfunction ChallengerActionList(props) {\n  // Sets the time until the next challenger attack in tenths of a second\n  // Hard-coded to 2 seconds between attacks right now\n\n  const timerBarStyles = {\n    position: 'absolute',\n    height: 'inherit',\n    left: '0px',\n    width: props.percentage + '%', /* CSS transitions will be applied using states to change the width of the bar */\n    backgroundColor: 'red',\n    transitionProperty: 'width',\n    transitionDuration: props.duration + 'ms',\n    transitionTimingFunction: 'linear'\n  };\n\n  return (\n    <div className=\"challenger-actions\">\n      {/* This value would be passed from the state?? Or through a setInterval of some kind to update 50 times a second? */}\n      <p>NEXT ATTACK</p>\n      <div className=\"bar-container\"> {/* Creates the timer bar */}\n        <div className=\"timer-bar\" style={timerBarStyles}> {/* Creates the animating portion of timer bar, uses CSS transitions */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ChallengerActionList;","// TextInput\nimport React, { useState } from \"react\";\n\nfunction TextInput(props) {\n\n  return (\n    <>\n      <input\n        autoFocus\n        type=\"text\"\n        name=\"input\"\n        placeholder=\"Start typing!\"\n        value={props.value} \n        onChange={e => props.onChange(e.target.value)}\n      />\n    </>\n  );\n}\n\nexport default TextInput;","// const arenas = [\n//   {\n//     name: \"Hogwarts\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\",\n//     beaten: false\n//   },\n//   {\n//     name: \"Indigo Plateau\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\",\n//     beaten: true\n//   },\n//   {\n//     name: \"Minas Tirith\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\",\n//     beaten: false\n//   },\n//   {\n//     name: \"Final Destination\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\",\n//     beaten: false\n//   },\n//   {\n//     name: \"Hotel California\",\n//     arena_card: \"/images/door.jpg\",\n//     background_image: \"/images/door.jpg\",\n//     background_music: \"/sounds/background-music.ogg\",\n//     beaten: true\n//   }\n// ]\n\n//takes in an array of arenas and the arena that was completed, plus a boolean of whether arena was won or lost and returns a \n//new array of arenas where the won arena's beaten value is true or false\n\nexport default function updateToArenaCompleted(arenas, arenaCompleted, winLose) {\n  let newArenasObj = []\n  for (const arena of arenas) {\n    if (arena.name === arenaCompleted && winLose) {\n      const newArenaTrue = {\n        ...arena,\n        beaten: true\n      }\n      newArenasObj.push(newArenaTrue)\n    } else if (arena.name === arenaCompleted && !winLose) {\n      const newArenaFalse = {\n        ...arena,\n        beaten: false\n      }\n      newArenasObj.push(newArenaFalse)\n    } else {\n      newArenasObj.push(arena)\n    }\n  }\n  return newArenasObj;\n}\n\n// export function updateToArenaLost(arenas, arenaLost) {\n//   let newArenasObj = []\n//   for (const arena of arenas) {\n//     if (arena.name === arenaLost) {\n//       const newArena = {\n//         ...arena,\n//         lost: true\n//       }\n//       newArenasObj.push(newArena)\n//     } else {\n//       newArenasObj.push(arena)\n//     }\n//   }\n//   return newArenasObj;\n// }\n// console.log(updateToArenaLost(arenas, \"Hogwarts\"))","// Libraries\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\n// Components\nimport HealthBar from '../HealthBar';\nimport Avatar from '../Avatar';\nimport PlayerActionList from '../PlayerActionList';\nimport ChallengerActionList from '../ChallengerActionList';\nimport TextInput from '../TextInput';\n\n// Styles\nimport './Arena.scss'\n//helpers\nimport updateToArenaCompleted from \"../../helpers/makeNewArenas\";\nimport { countArenasLost, countArenasBeaten } from \"../../helpers/countArenasCompleted\";\n\n// Hooks\nimport useInputMatcher from '../../hooks/useInputMatcher';\nimport useChallengerAction from '../../hooks/useChallengerAction';\nimport useBattles from '../../hooks/useBattles';\n\nfunction Arena(props) {\n\n  // console.log(props.arena);\n  // States\n  // const [words, setWords] = useState([]);\n  const [playerActions, setPlayerActions] = useState([]);\n  const [wordIndex, setWordIndex] = useState([0, 0]); // [Current attack word index, Current heal word index]\n  const [health, setHealth] = useState({ player: props.initialPlayerHealth, challenger: props.challengerHealth })\n  const [playerInput, setPlayerInput] = useState('');\n  const { attackTime, setAttackTime } = useChallengerAction(props.arena.Difficulty.attack_time_ms);\n  const { handleWordMatch } = useInputMatcher();\n  // Timings for the challenger's attacks\n  const [challengerTimer, setChallengerTimer] = useState(20);\n  const { startBattle, endBattle, style, handleAttackAnimation } = useBattles();\n\n  // Handles player attack\n  useEffect(() => {\n    // console.log('word match?', handleWordMatch(playerInput, playerActions));\n\n    const action = handleWordMatch(playerInput, playerActions);\n    // console.log('Action is: ', action);\n    // When finished typing a word, action will equal the name of the action it executes\n    if (action) {\n      // Show action animation\n      handleAttackAnimation('player', action.name);\n\n      // Grab a new word\n      // console.log('ACTION IS: ', action);\n      getNextWord(action);\n      // Deal damage\n      switch (action.name) {\n        case 'attack':\n          changeHealth('challenger', -10);\n          break;\n        case 'heal':\n          changeHealth('player', 20);\n      };\n      // Clear the text box\n      setPlayerInput('');\n    };\n  }, [playerInput]);\n\n  // Helper functions\n\n  const changeHealth = (fighter, hp) => {\n    // console.log(`${fighter} DAMAGED! for ${hp} hp`);\n    setHealth(prev => {\n      const newHealth = { ...prev };\n      // Health cannot be deducted past zero or increased past 100\n      newHealth[fighter] = Math.min(Math.max(newHealth[fighter] + hp, 0), 100);\n      return newHealth;\n    });\n  };\n\n  /*\n  1. health.player === 0 && !MORETHAN 3 ARENAS LOST => LOSE THE BATTLE => DEFEAT SCREEN THAT LINKS BACK TO MAP\n  2. health.player === 0 && MORE THAN 3 ARENAS LOST => LOSE THE GAME, BUT NOT TO THE BOSS => DEFEAT SCREEN WITH RIDICULE THAT LINKS BACK TO THE START SCREEN (AND CLEAR THE GAME STATE)\n  3. health.player === 0 && CHALLENGER/ARENA === BOSS => LOST THE GAME, AGAINST THE BOSS => DEFEAT SCREEN WITH CONDOLENCES THAT LINKS BACK TO THE START SCREEN (AND CLEAR ALL STATE)\n  4. health.challenger === 0 && !CHALLENGER/ARENA === BOSS => WIN THE BATTLE, BUT NOT THE FINAL BATTLE => VICTORY SCREEN THAT LINKS BACK TO THE MAP\n  5. health.challenger === 0 && !CHALLENGER/ARENA === BOSS && ARENAS BEATEN === 5 => WIN THE FINAL BATTLE BEFORE THE BOSS => VICTORY SCREEN THAT LINKS BACK TO ARENA WITH BOSS (SET CHALLENGER TO BOSS)\n  6. health.challenger === 0 && CHALLENGER/ARENA === BOSS => WIN THE GAME, INCLUDING BOSS => VICTORY SCREEN WITH YOUR NAME ON THE LEADERBOARD & FIREWORKS, LINKS BACK TO THE START SCREEN (AND CLEAR ALL STATE)\n  \n  SCREENS:\n  1. LoseBattle.js - EXISTS\n  2. LoseGameNotBoss.js - CREATE\n  3. LoseGameToBoss.js - CREATE\n  4. WinBattle.js  - EXISTS\n  5. WinAllArenas.js - CREATE\n  6. WinGame.js  - EXISTS\n  \n  */\n\n  async function handleBattleOver() {\n    if (health.player === 0) {\n      if (props.arena.name === \"Boss\") {\n        props.setOutcome('LOSEGAMETOBOSS');\n      } else {\n        if (countArenasLost(props.arenas) >= 2) {\n          props.setOutcome('LOSEGAMENOTBOSS');\n        } else {\n          props.setOutcome('LOSEBATTLE');\n          props.setArenas(updateToArenaCompleted(props.arenas, props.arena.name, false))\n        }\n      }\n      props.setMode(\"TRANSITION\");\n      const returnedScore = await endBattle(false);\n      props.setLastResult(returnedScore);\n      props.setMode(\"OUTCOME\")\n    } else if (health.challenger === 0) {\n      if (props.arena.name === \"Boss\") {\n        props.setOutcome('WINGAME');\n      } else {\n        if (countArenasBeaten(props.arenas) >= 4) {\n          console.log('won more than 4 arenas, go to boss!')\n          props.setOutcome('WINALLARENAS');\n          props.setMode(\"OUTCOME\");\n        } else {\n          props.setOutcome('WINBATTLE');\n          props.setArenas(updateToArenaCompleted(props.arenas, props.arena.name, true))\n        }\n      }\n      props.setMode(\"TRANSITION\");\n      const returnedScore = await endBattle(true);\n      props.setLastResult(returnedScore);\n      props.setMode(\"OUTCOME\");\n    }\n  };\n\n  useEffect(() => {\n    handleBattleOver();\n  }, [health])\n\n  // Handles Challenger Attack\n  // Use a useEffect to prevent looping (otherwise, every time interval is set, the re-render causes a second timer to be started, etc.)\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (challengerTimer == 0) {\n        // Show attack animation\n        handleAttackAnimation('challenger');\n        setChallengerTimer(19);\n        // console.log('CHALLENGER LAUNCHED AN ATTACK');\n        changeHealth('player', -props.arena.Difficulty.damage_per_hit);\n        // We would eventually put a function for the challenger to attack here\n      } else {\n        setChallengerTimer(prev => prev - 1);\n      }\n    }, attackTime / 20);\n    return () => clearInterval(interval);\n  }, [challengerTimer, attackTime]);\n\n  // Gets the next word from the randomized list of words\n  const getNextWord = (action) => {\n    const actionIndex = playerActions.indexOf(action);\n    // Get next word or restart from beginning of word list\n    (wordIndex[actionIndex] === action.words.length - 1) ? wordIndex[actionIndex] = 0 : wordIndex[actionIndex]++;\n    playerActions[actionIndex].word = playerActions[actionIndex][\"words\"][wordIndex[actionIndex]];\n  }\n\n  // On first load\n  useEffect(async () => {\n    // Start battle timer\n    startBattle(props.game.id, props.arena.id);\n    // Get word list and action list\n    try {\n      axios.defaults.baseURL = 'http://localhost:3001';\n      const rawWords = await axios.get(`/api/action-words/${props.arena.id}`);\n      const initialWordsState = rawWords.data.map((action, ind) => {\n        console.log('Attempting to retrieve words for', ind, playerActions);\n        return { ...action, word: action.words[0] };\n      });\n      setPlayerActions(initialWordsState);\n    } catch (err) {\n      console.log(\"Error getting data: \", err);\n    }\n  }, []);\n\n  return (\n    <main className=\"arena\" >\n      <div className=\"health\">\n        <HealthBar\n          health={health.player}\n          onClick={() => { changeHealth('player', -10) }}\n        />\n      </div>\n      <div className=\"health\">\n        <HealthBar\n          health={health.challenger}\n          onClick={() => { changeHealth('challenger', -10) }}\n        />\n      </div>\n      <div className=\"avatar player\">\n        <Avatar\n          name={props.game.player_name || 'Player'}\n          filename='/images/boss-spirit-fighter.png'\n        />\n        <img\n          class=\"action player\"\n          src=\"/images/player-attack.png\"\n          alt=\"Player attacks\"\n          style={style.player.attack}\n        />\n        <img\n          class=\"action player\"\n          src=\"/images/player-heal.png\"\n          alt=\"Player heals\"\n          style={style.player.heal}\n        />\n      </div>\n      <div className=\"avatar challenger\">\n        <Avatar\n          name={props.arena.challenger_name}\n          filename={props.arena.challenger_sprite}\n        />\n        <img\n          class=\"action challenger\"\n          src=\"/images/challenger-attack.png\"\n          alt=\"Challenger attacks\"\n          style={style.challenger}\n        />\n      </div>\n      <div className=\"player-actions\">\n        <PlayerActionList\n          playerActions={playerActions}\n          playerInput={playerInput}\n        />\n      </div>\n      <div className=\"challenger-actions\">\n        <div className=\"buttons\">\n          <button onClick={() => setAttackTime(1000000000)}>Pause</button>\n          <button onClick={() => setAttackTime(20000)}>Slow</button>\n          <button onClick={() => setAttackTime(2000)}>Normal</button>\n        </div>\n        <ChallengerActionList\n          // actions={{\n          //   timeToAttack: 5\n          // }}\n          attack='/images/sword.png'\n          duration={attackTime / 20}\n          percentage={challengerTimer / 20 * 100}\n        />\n      </div>\n      <div className=\"typing\">\n        <TextInput\n          value={playerInput}\n          onChange={setPlayerInput}\n        />\n      </div>\n    </main >\n  );\n}\n\nexport default Arena;","// controls the challenger's state\n// makes an axios request to challengers to get the name, health, attack time etc\n\n// shifts between each of the game modes: start, map, arena and result\n\nimport { useState } from \"react\";\n\nexport default function useChallengerAction(initial) {\n\n  const [attackTime, setAttackTime] = useState(initial);\n\n  return { attackTime, setAttackTime};\n}\n","import React, { useEffect } from 'react';\nimport useLeaders from '../hooks/useLeaders';\n\nconst Leaderboard = (props) => {\n\n  console.log('Rendering leaderboard');\n\n  const leaderStats = props.leaders.map(leader => {\n    return (\n      <tr>\n        <td>{leader.player_name}</td>\n        <td>{leader.score}</td>\n      </tr>\n    )\n  });\n\n  return (<table>\n    <thead>\n      <tr>\n        <th>Player</th>\n        <th>Score</th>\n      </tr>\n    </thead>\n    <tbody>\n      {leaderStats}\n    </tbody>\n  </table>);\n};\n\nexport default Leaderboard;","import React, { useEffect } from 'react';\nimport Leaderboard from '../../Leaderboard';\n\n// Only a template, it is currently not possible to reach this page since boss hasn't been created yet\nconst WinGame = (props) => {\n\n  useEffect(() => {\n    props.soundMedia.current.src = '/sounds/win-game.mp3';\n    return (() => {\n      props.soundMedia.current.src = '/sounds/background-music.ogg';\n    });\n  }, [props.soundMedia]);\n\n\n  return (\n    <main className=\"outcome win-game\">\n      <p className=\"message\">\n        <h1>YOU WON!</h1>\n        <p>With your victory, you earned {props.lastResult} points.</p>\n        <p>You beat the boss and won the game with {props.score} points.</p>\n        <Leaderboard leaders={props.leaders} />\n        <button className=\"primary\" onClick={() => {\n          props.resetGame()\n          }}>Back to Start</button>\n      </p>\n    </main>\n  );\n};\n\nexport default WinGame;","import React, { useEffect } from 'react';\n\nconst WinBattle = (props) => {\n  \n  useEffect(() => {\n    props.soundMedia.current.src = '/sounds/win-battle.mp3';\n    return (() => {\n      props.soundMedia.current.src = '/sounds/background-music.ogg';\n    });\n  }, [props.soundMedia]);\n\n  return (\n    <main className=\"outcome win-battle\">\n      <p className=\"message\">\n        <h1>VICTORY</h1>\n        <p>Congrats, you have triumphed over {props.challenger}!</p>\n        <p>With your victory, you earned {props.lastResult} points. (If this looks higher than you expected, it's because you beat the arena\n        so quickly you got bonus points!</p>\n        <p>You now have a total of {props.score} points.</p>\n        <button className=\"primary\" onClick={() => props.setMode('MAP')}>Choose Next Battle</button>\n      </p>\n    </main>\n  );\n};\nexport default WinBattle;","import React, { useEffect } from 'react';\n\nconst LoseBattle = (props) => {\n\n  useEffect(() => {\n    props.soundMedia.current.src = '/sounds/lose-battle.mp3';\n    return (() => {\n      props.soundMedia.current.src = '/sounds/background-music.ogg';\n    });\n  }, [props.soundMedia]);\n\n  return (\n    <main className=\"outcome lose-battle\">\n      <p className=\"message\">\n        <h1>DEFEAT</h1>\n        <p>There's no sugercoating this - losing sucks. But the great thing is this, you still have some more chances!</p>\n        <p>You remain at {props.score} points.</p>\n        <button className=\"primary\" onClick={() => props.setMode('MAP')}>Choose next battle</button>\n      </p>\n    </main>\n  );\n};\nexport default LoseBattle;","import React, { useEffect } from 'react';\nimport Leaderboard from '../../Leaderboard';\n\nconst LoseGameNotBoss = (props) => {\n\n  useEffect(() => {\n    props.soundMedia.current.src = '/sounds/lose-game.mp3';\n    return (() => {\n      props.soundMedia.current.src = '/sounds/background-music.ogg';\n    });\n  }, [props.soundMedia]);\n\n  return (\n    <main className=\"outcome lose-game\">\n      <p className=\"message\">\n        <h1>GAME OVER</h1>\n        <p>Uh oh! Three strikes you're out! You can try again from the beginning though.</p>\n        <p>You collected {props.score} points this game. However, because you did not make it to the final boss, your name will not be immortalized on the leaderboard.</p>\n        <button className=\"primary\" onClick={() => {\n          props.resetGame()\n        }\n        }>Back to start</button>\n        <Leaderboard leaders={props.leaders} />\n      </p>\n    </main>\n  );\n};\nexport default LoseGameNotBoss;","import React, { useEffect } from 'react';\nimport Leaderboard from '../../Leaderboard';\n\nconst LoseGameToBoss = (props) => {\n\n  useEffect(() => {\n    props.soundMedia.current.src = '/sounds/lose-game.mp3';\n    return (() => {\n      props.soundMedia.current.src = '/sounds/background-music.ogg';\n    });\n  }, [props.soundMedia]);\n\n  return (\n    <main className=\"outcome lose-game\">\n      <p className=\"message\">\n        <h1>DEFEAT</h1>\n        <p>You put up a valiant fight, but the boss was too much for you. Too bad. You can try again though!</p>\n        <p>You collected {props.score} points this game. However, because you did not defeat the final boss, your name will not be immortalized on the leaderboard.</p>\n        <button className=\"primary\" onClick={() => {\n          props.resetGame()\n          }\n          }>Back to start</button>\n        <Leaderboard leaders={props.leaders} />\n      </p>\n    </main>\n  );\n};\nexport default LoseGameToBoss;","import React, { useEffect } from 'react';\n\n// Only a template, it is currently not possible to reach this page since boss hasn't been created yet\nconst WinAllArenas = (props) => {\n\n  useEffect(() => {\n    props.soundMedia.current.src = '/sounds/win-battle.mp3';\n    return (() => {\n      props.soundMedia.current.src = '/sounds/background-music.ogg';\n    });\n  }, [props.soundMedia]);\n\n  return (\n    <main className=\"outcome win-battle\">\n      <p className=\"message\">\n        <h1>YOU WON!</h1>\n        <p>You beat 5 levels! That means you now enter the arena with the boss. Win this fight and you win the game. Good luck!</p>\n        <p>With your victory, you earned {props.lastResult} points. (If this looks higher than you expected, it's because you beat the arena\n        so quickly you got bonus points!</p>\n        <p>Heading into the final fight, you currently have {props.score} points.</p>\n        <button className=\"primary\" onClick={() => {\n          props.setMode('BOSS')\n          //Set the challenger to the boss\n          }}>Fight the boss</button>\n      </p>\n    </main>\n  );\n};\n\nexport default WinAllArenas;","import React, { useEffect } from \"react\";\n\n// Components\nimport WinGame from './WinGame';\nimport WinBattle from './WinBattle';\nimport LoseBattle from './LoseBattle';\nimport LoseGameNotBoss from './LoseGameNotBoss';\nimport LoseGameToBoss from './LoseGameToBoss';\nimport WinAllArenas from './WinAllArenas';\n\n// Hooks\nimport useLeaders from '../../../hooks/useLeaders';\n\n// Styles\nimport './index.scss';\n\nfunction Outcome(props) {\n\n  const WINGAME = 'WINGAME'; // Player won the whole game\n  const LOSEBATTLE = 'LOSEBATTLE'; // Player lost an arena\n  const WINBATTLE = 'WINBATTLE'; // Player won the arena\n  const LOSEGAMENOTBOSS = \"LOSEGAMENOTBOSS\" // Player lost the game because they lost too many arenas before they reached a boss\n  const LOSEGAMETOBOSS = \"LOSEGAMETOBOSS\" // Player reached the boss but lost against the boss, thus losing the game\n  const WINALLARENAS = \"WINALLARENAS\" // Player has won 5 arenas and is about to face the boss\n  const PENDING = 'PENDING'; // Player has not finished an arena yet\n  const outcome = props.outcome;\n\n  // State Hooks\n  const { leaders, getLeaders } = useLeaders();\n\n  useEffect(() => {\n    props.updateScore();\n    getLeaders();\n  }, []);\n\n  return (\n    <>\n      {outcome === WINGAME && <WinGame setMode={props.setMode} resetGame={props.resetGame} leaders={leaders} score={props.score} lastResult={props.lastResult} soundMedia={props.soundMedia} />}\n      {outcome === LOSEBATTLE && <LoseBattle setMode={props.setMode} soundMedia={props.soundMedia} lastResult={props.lastResult} score={props.score} />}\n      {outcome === WINBATTLE && <WinBattle setMode={props.setMode} soundMedia={props.soundMedia} challenger={props.challenger} lastResult={props.lastResult} score={props.score}/>}\n      {outcome === LOSEGAMENOTBOSS && <LoseGameNotBoss setMode={props.setMode} soundMedia={props.soundMedia} leaders={leaders} lastResult={props.lastResult} score={props.score} resetGame={props.resetGame}/>}\n      {outcome === LOSEGAMETOBOSS && <LoseGameToBoss setMode={props.setMode} soundMedia={props.soundMedia} leaders={leaders} lastResult={props.lastResult} score={props.score} resetGame={props.resetGame}/>}\n      {outcome === WINALLARENAS && <WinAllArenas setMode={props.setMode} score={props.score} soundMedia={props.soundMedia} lastResult={props.lastResult} />}\n      {outcome === PENDING && <main>Oops, looks like an error occurred. The result state shouldn't be pending!</main>}\n    </>\n  );\n}\n\nexport default Outcome;","import React from 'react';\n\nimport \"./Credits.scss\";\n\nfunction Credits(props) {\n  return (\n    <main className=\"credits\">\n      <div className=\"credits\">\n        <h1>Thanks for playing!</h1>\n        <h2>Credits:</h2> \n        <h3>Game Design, Programming & Styling</h3>\n        <div className=\"credits-container\">\n          <div className=\"credit\">\n            <h4>Helen Ouyang</h4>\n            <div className=\"logos\">\n              <a href=\"https://github.com/helenohyeah\" target=\"_blank\">\n                <img className=\"logo\" src=\"/images/github-logo.png\" />\n              </a>\n              <a href=\"https://www.linkedin.com/in/helenouyang/\" target=\"_blank\">\n                <img className=\"logo\" src=\"/images/linkedin-logo.png\" />\n              </a>\n            </div>\n            <img className=\"portrait\" src=\"/images/helen.png\" alt=\"Helen\" />\n          </div>\n          <div className=\"credit\">\n            <img className=\"portrait\" src=\"/images/jillian.png\" alt=\"Jillian\" />\n            <h4>Jillian Martin</h4>\n            <div className=\"logos\">\n              <a href=\"https://github.com/jilliankmartin\" target=\"_blank\">\n                <img className=\"logo\" src=\"/images/github-logo.png\" />\n              </a>\n              <a href=\"https://www.linkedin.com/in/jilliankmartin/\" target=\"_blank\">\n                <img className=\"logo\" src=\"/images/linkedin-logo.png\" />\n              </a>\n            </div>\n          </div>\n          <div className=\"credit\">\n            <h4>Sherwin Kwan</h4>\n            <div className=\"logos\">\n              <a href=\"https://github.com/sherwin-kwan\" target=\"_blank\">\n                <img className=\"logo\" src=\"/images/github-logo.png\" />\n              </a>\n              <a href=\"https://www.linkedin.com/in/sherwinkwan/\" target=\"_blank\">\n                <img className=\"logo\" src=\"/images/linkedin-logo.png\" />\n              </a>\n            </div>\n            <img className=\"portrait\" src=\"/images/sherwin.png\" alt=\"Sherwin\" />\n          </div>\n        </div>\n        <h4>Additional Attribution for sound and assets??</h4>\n        <button\n          className=\"primary\"\n          onClick={() => props.setMode(\"START\")}\n        >\n          Back to Start\n        </button>\n      </div>\n    </main>\n  );\n}\n\nexport default Credits;","import React from 'react';\nimport './Instructions.scss'\n\nfunction Instructions(props) {\n  return (\n    <main className=\"instructions\">\n      <div className=\"instructions\">\n        <h1>Instructions</h1>\n        <h2>Your Objective:</h2>\n        <p>Battle your way through 5 arenas to get to the boss. Beat the boss and win the game!</p>\n        <img src=\"/images/progress-bar.png\" alt=\"Progress bar\" />\n        <h2>Battling:</h2>\n        <p>Type the words that show up to attack for 10 damage or heal 10 health.</p>\n        <img src=\"/images/words-to-type.png\" alt=\"Battle arena\" />\n        <h2>Scoring:</h2>\n        <p>Earn more points by choosing more difficult arenas.</p>\n        <img src=\"/images/difficulty-and-points.png\" alt=\"Difficulty and points\" />\n        <p>Beat the game faster to get a bonus multiplier and top the leaderboards!</p>\n        <img src=\"/images/leaderboards.png\" alt=\"Leaderboards\" />\n        <button\n          className=\"primary\"\n          onClick={() => props.setMode(\"START\")}\n        >\n          Got it, Let's Play!\n        </button>\n      </div>\n    </main>\n  );\n}\n\nexport default Instructions;","import React from 'react';\n\nconst MuteButton = (props) => {\n\n  return (\n    <aside className=\"mute-music\" >\n      {props.music === \"OFF\" && <img src=\"/images/mute-music.png\" onClick={() => {props.setMusic(\"ON\")}} alt=\"unmute music\"/>}\n      {props.music === \"ON\" && <img src=\"/images/unmute-music.png\" onClick={() => {props.setMusic(\"OFF\")}} alt=\"mute music\"/>}\n    </aside>\n  )\n};\n\nexport default MuteButton;","import React from 'react';\n\nfunction Transition(props) {\n\n  const winningArray = ['WINGAME', 'WINBATTLE', 'WINALLARENAS'];\n\n  return (\n    <main className=\"transition\">\n      <h1>{winningArray.includes(props.outcome) ? 'YOU WON' : 'YOU LOST'}</h1>\n    </main>\n  );\n}\n\nexport default Transition;","// Libraries\nimport React, { useContext, useEffect, useRef } from \"react\";\n\n//helpers\nimport { countArenasBeaten, countArenasLost } from \"../../helpers/countArenasCompleted\";\n\n//Hooks\nimport useBattles from '../../hooks/useBattles';\nimport useGameMode from \"../../hooks/useGameMode\";\nimport useArena from \"../../hooks/useArena\";\nimport useOutcome from '../../hooks/useOutcome';\nimport useGame from '../../hooks/useGame';\nimport useMusic from '../../hooks/useMusic';\nimport useLeaders from '../../hooks/useLeaders';\n\n// Styles\nimport './index.scss';\n\n// Components\nimport TempNavBar from '../TempNavBar';\nimport StartGame from './StartGame';\nimport Map from './Map';\nimport Arena from './Arena';\nimport Outcome from './Outcome'\nimport Credits from './Credits';\nimport Instructions from './Instructions';\nimport MuteButton from './MuteButton';\nimport Transition from './Transition';\n\n// Contexts\n// import GameContext from '../../helpers/gameContext';\n\nfunction Canvas(props) {\n\n  // Modes\n  const START = \"START\";\n  const MAP = \"MAP\";\n  const ARENA = \"ARENA\";\n  const OUTCOME = \"OUTCOME\";\n  const BOSS = \"BOSS\";\n  const CREDITS = \"CREDITS\";\n  const INSTRUCTIONS = \"INSTRUCTIONS\";\n  const TRANSITION = \"TRANSITION\";\n\n\n  //hooks\n  const { mode, setMode } = useGameMode(\"START\")\n  const { arenas, setArenas, arena, setArena, cleanArenas, handleBossArena } = useArena();\n  const { outcome, setOutcome } = useOutcome('PENDING');\n  const { battles, setBattles, setCurrentBattle } = useBattles();\n  const { game, setGame, startGame, score, setScore, updateScore, lastResult, setLastResult } = useGame();\n  const { music, setMusic } = useMusic();\n  const { leaders, getLeaders } = useLeaders();\n\n  // Load background music\n  const soundMedia = useRef(null);\n\n  useEffect(() => {\n    if (music === \"ON\") {\n      if (mode === \"OUTCOME\") {\n        soundMedia.current.loop = false;\n        console.log('PLAYING MUSIC!!');\n        soundMedia.current.play();\n        soundMedia.current.volume = 0.1; // Make sure you leave the volume setting here - otherwise it's too loud!!\n      }\n      console.log('PLAYING MUSIC!!');\n      soundMedia.current.play();\n      soundMedia.current.volume = 0.1; // Make sure you leave the volume setting here - otherwise it's too loud!!\n    } else {\n      // soundMedia.current.stop();\n      soundMedia.current.volume = 0.0;\n    }\n  }, [mode, music]);\n\n  // reset game function\n  const resetGameState = function () {\n    setMode(\"START\");\n    setGame({});\n    setArena([])\n    setArenas(cleanArenas)\n    setOutcome(\"PENDING\")\n    setCurrentBattle([])\n  }\n\n  return (\n    <>\n      <TempNavBar onClick={setMode} />\n      <audio autoPlay loop ref={soundMedia} src='/sounds/background-music.ogg' >\n        Your browser does not support HTML audio.\n      </audio>\n      <div className=\"canvas\">\n        <MuteButton\n          music={music}\n          setMusic={setMusic}\n        />\n        {mode === START && <StartGame\n          setMode={setMode}\n          setGame={setGame}\n          game={game}\n          onSubmit={startGame} />\n        }\n        {mode === MAP && <Map\n          setGameMode={setMode}\n          score={score}\n          game={game}\n          updateScore={updateScore}\n          arena={arena}\n          arenas={arenas}\n          setArena={setArena}\n          arenasBeaten={countArenasBeaten(arenas)} />\n        }\n        {mode === ARENA && <Arena\n          setLastResult={setLastResult}\n          setOutcome={setOutcome}\n          setScore={setScore}\n          initialPlayerHealth={100}\n          challengerHealth={100}\n          setMode={setMode}\n          arena={arena}\n          arenas={arenas}\n          setArenas={setArenas}\n          game={game}\n        />}\n        {mode === BOSS && <Arena\n          setLastResult={setLastResult}\n          setOutcome={setOutcome}\n          setScore={setScore}\n          initialPlayerHealth={100}\n          challengerHealth={100}\n          setMode={setMode}\n          arena={handleBossArena()}\n          arenas={arenas}\n          setArenas={setArenas}\n          game={game}\n        />}\n        {mode === TRANSITION && <Transition\n          outcome={outcome}\n        />}\n        {mode === OUTCOME && <Outcome\n          outcome={outcome}\n          lastResult={lastResult}\n          soundMedia={soundMedia}\n          setMode={setMode}\n          score={score}\n          updateScore={updateScore}\n          resetGame={resetGameState}\n          arena={arena.name}\n          challenger={arena.challenger_name}\n        />}\n        {mode === CREDITS && <Credits\n          setMode={setMode}\n        />}\n        {mode === INSTRUCTIONS && <Instructions\n          setMode={setMode}\n        />}\n      </div>\n    </>\n  );\n}\n\nexport default Canvas;\n","// shifts between each of the game modes: start, map, arena and result\n\nimport { useState } from \"react\";\n\nexport default function useGameMode(initial) {\n\n  const [mode, setMode] = useState(initial)\n\n  return { mode, setMode};\n}\n","import { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nexport default function useArena() {\n  \n  const [ arenas, setArenas ] = useState([]);\n  const [ arena, setArena ] = useState([]); // controls which arena battle the player in\n  const [ cleanArenas, setCleanArenas ] = useState([]); //the Arenas as they are in the DB - without the key beaten. This is the state that should be used at the beginning of a game\n  \n  // Get Arena data from DB\n  useEffect(() => {\n    axios.defaults.baseURL = 'http://localhost:3001';\n    axios.get('/api/arenas')\n      .then((data) => {\n        // Remove Boss Arena from response\n        const normalArenas = data.data.filter(arena => arena.name !== 'Boss');\n        setArenas(normalArenas);\n        setCleanArenas(data.data);\n      })\n      .catch(err => console.log(\"Error getting Arena data: \", err));\n  }, []);\n\n  function handleBossArena () {\n    const bossArena = cleanArenas.find(arena => arena.name === 'Boss');\n    return bossArena;\n  }\n\n  return { arenas, setArenas, arena, setArena, cleanArenas, handleBossArena };\n}\n\n\n\n","import { useState } from \"react\";\n\nexport default function useOutcome(initial) {\n  \n  const [outcome, setOutcome] = useState(initial);\n\n  return { outcome, setOutcome }\n}","import { useState, useEffect } from \"react\";\nimport axios from 'axios';\n\nexport default function useGame() {\n\n  const [game, setGame] = useState({});\n  const [score, setScore] = useState(0);\n  const [lastResult, setLastResult] = useState(0);\n\n  function startGame(name) {\n    console.log(\"NAME WHEN IN HOOK IS A: \", typeof name, \"NAME: \", name)\n\n    const newGame = {player_name: name}\n    \n    axios.defaults.baseURL = 'http://localhost:3001';\n\n    axios.post('/api/games', newGame)\n      .then(data => {\n        // The API will send back the ID returned from the database. This can be stored in state\n        const newGameId = data.data\n        console.log('New id is: ', newGameId);\n        setGame((prev) => {\n          return {\n            ...prev,\n            id: newGameId\n          }\n        })\n      })\n      .catch(err => console.log(\"Error posting Game data: \", err));\n  }\n\n  async function updateScore() {\n    try {\n      const res = await axios.get(`/api/game/${game.id}`);\n      setScore(Number(res.data[0].score));\n    } catch (err) {\n      console.log(err.message);\n      setScore(NaN); // Signifies that score could not be found\n    }\n  }\n\n  return { game, setGame, startGame, score, setScore, updateScore, lastResult, setLastResult };\n}","import { useState } from \"react\";\n\nexport default function useMusic() {\n\n  const [ music, setMusic ] = useState(\"ON\")\n\n  return { music, setMusic }\n}\n","// Libraries\nimport React from \"react\";\n\n// Components\nimport Canvas from './Canvas';\n\nfunction Application() {\n  return (\n    <div className=\"app\">\n        <Canvas />\n    </div>\n  );\n}\n\nexport default Application;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// Libraries\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Application from './components/Application';\nimport reportWebVitals from './reportWebVitals';\n\n// Styles\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Application />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}